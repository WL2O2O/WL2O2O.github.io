<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>CS_GUIDER&#39;S Blog</title>
    <link>https://wl2o2o.github.io/</link>
    
    <atom:link href="https://wl2o2o.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>欢迎来到我的CS_GUIDER博客！这里提供了全面、实用和最新的Java编程信息。你可以找到Java算法、项目、博客、数据库、Linux系统的教程和笔记。我致力于为您提供Java编程的实用指南和资源，包括Java框架、JVM和Git等。无论您是初学者还是经验丰富的开发人员，都可以从中获益。谢谢您的光临！</description>
    <pubDate>Tue, 16 Sep 2025 17:23:55 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>前后端项目上线教程</title>
      <link>https://wl2o2o.github.io/posts/e20116f0.html</link>
      <guid>https://wl2o2o.github.io/posts/e20116f0.html</guid>
      <pubDate>Sun, 18 Aug 2024 10:36:43 GMT</pubDate>
      
      <description>我的职业生涯中上线项目的三种方式————典藏版（无坑）</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="上线项目的3种方式"><a href="#上线项目的3种方式" class="headerlink" title="上线项目的3种方式"></a>上线项目的3种方式</h1><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p><em><strong>注意：使用哪种方式上线，就准备对应需要的环境</strong></em></p><h3 id="方式一、使用常规方式上线"><a href="#方式一、使用常规方式上线" class="headerlink" title="方式一、使用常规方式上线"></a>方式一、使用常规方式上线</h3><ul><li><code>Nginx</code>和<code>jdk</code>的安装与配置<br><a href="https://zhuanlan.zhihu.com/p/425790769">Nginx安装配置的参考链接：</a><a href="https://zhuanlan.zhihu.com/p/425790769">https://zhuanlan.zhihu.com/p/425790769</a> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment"># nginx 默认配置</span></span><br><span class="line"> user  nginx;</span><br><span class="line"> worker_processes  auto;</span><br><span class="line"></span><br><span class="line"> error_log  /var/log/nginx/error.log notice;</span><br><span class="line"> pid        /var/run/nginx.pid;</span><br><span class="line"> events &#123;</span><br><span class="line">     worker_connections  1024;</span><br><span class="line"> &#125;</span><br><span class="line"> http &#123;</span><br><span class="line">     include       /etc/nginx/mime.types;</span><br><span class="line">     default_type  application/octet-stream;</span><br><span class="line"> </span><br><span class="line">     log_format  main  <span class="string">&#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span></span><br><span class="line">                     <span class="string">&#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span></span><br><span class="line">                     <span class="string">&#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;</span>;</span><br><span class="line">     access_log  /var/log/nginx/access.log  main;</span><br><span class="line">     sendfile        on;</span><br><span class="line">     <span class="comment">#tcp_nopush     on;</span></span><br><span class="line"> </span><br><span class="line">     keepalive_timeout  65;</span><br><span class="line"> </span><br><span class="line">     <span class="comment">#gzip  on;</span></span><br><span class="line"> </span><br><span class="line">     include /etc/nginx/conf.d/*.conf;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 使用yum来安装jdk，免配置环境变量</span></span><br><span class="line">yum install -y java-1.8.0-openjdk*</span><br></pre></td></tr></table></figure></li></ul><h3 id="方式二、使用宝塔面板上线"><a href="#方式二、使用宝塔面板上线" class="headerlink" title="方式二、使用宝塔面板上线"></a>方式二、使用宝塔面板上线</h3><ul><li><p>首先，直接建议打一个快照，标记这是安装宝塔面板之前的快照，便于我们重装系统</p></li><li><p>使用宝塔面板上线<br><a href="https://www.bt.cn/new/download.html">官网教程：</a><a href="https://www.bt.cn/new/download.html">https://www.bt.cn/new/download.html</a></p></li></ul><h3 id="方式三、使用Docker容器上线"><a href="#方式三、使用Docker容器上线" class="headerlink" title="方式三、使用Docker容器上线"></a>方式三、使用<code>Docker</code>容器上线</h3><ul><li><p><code>Docker</code>的安装与配置<br><a href="https://www.51cto.com/article/715012.html">参考链接：</a><a href="https://www.51cto.com/article/715012.html">https://www.51cto.com/article/715012.html</a></p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打开配置文件</span></span><br><span class="line">vi /etc/docker/daemon.json</span><br><span class="line"><span class="comment"># 原来的配置</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://y5u7p3c7.mirror.aliyuncs.com&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 换用下面的配置，目前2024.08.18可用</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;registry-mirrors&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;https://docker.m.daocloud.io&quot;</span></span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><p>1、需要更换yum源。<a href="https://blog.csdn.net/qq_52545155/article/details/137229782">参考链接：</a><a href="https://blog.csdn.net/qq_52545155/article/details/137229782">https://blog.csdn.net/qq_52545155/article/details/137229782</a></p><h2 id="前端部署"><a href="#前端部署" class="headerlink" title="前端部署"></a>前端部署</h2><h3 id="普通上线"><a href="#普通上线" class="headerlink" title="普通上线"></a>普通上线</h3><p>1、上传前端打包好的<code>dist</code>文件夹到服务器</p><blockquote><p>一般都是直接使用本地的打包好的<code>dist</code>文件夹，如果想在服务器进行打包，可以使用<code>npm run build</code>命令，但是前提是需要在服务器进行安装<code>node</code>和<code>npm</code>，可以参考这篇文章。<a href="https://wl2o2o.github.io/">专业安装NVM教程（链接待补充）</a></p></blockquote><p>2、配置Nginx</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 首先进入 nginx 的配置文件目录</span></span><br><span class="line"><span class="built_in">cd</span> /usr/local/nginx/conf <span class="comment"># 默认在/usr/local/nginx/conf, 也可能在 /etc/nginx</span></span><br><span class="line"><span class="comment"># 备份一份默认的配置文件，避免出现配置错误</span></span><br><span class="line"><span class="built_in">cp</span> nginx.conf nginx.conf.bak</span><br><span class="line"><span class="comment"># 编辑配置文件</span></span><br><span class="line">vim nginx.conf</span><br><span class="line"><span class="comment"># 编写配置</span></span><br><span class="line"><span class="comment">## 需要改动的地方 1：更改启动用户名为root</span></span><br><span class="line"><span class="comment">#user  nobody;</span></span><br><span class="line">user  root;</span><br><span class="line">    <span class="comment">## 需要改动的地方 2：更改项目名以及遍历查找index.html</span></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#charset koi8-r;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#access_log  logs/host.access.log  main;</span></span><br><span class="line"></span><br><span class="line">        location / &#123;   </span><br><span class="line">            <span class="comment"># 将dist目录重命名为项目名（非必须，出于好进行管理）</span></span><br><span class="line">            root   /root/services/smartapi-frontend;   </span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">            <span class="comment"># 增加一行可以遍历 root 多级目录的配置，如果没有配置只会在根目录中寻找</span></span><br><span class="line">            try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>跨域解决：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">location ^~ /api/ &#123;</span><br><span class="line">    <span class="comment"># 代理到后端服务</span></span><br><span class="line">    proxy_pass http://localhost:9000/api/;</span><br><span class="line">    add_header <span class="string">&#x27;Access-Control-Allow-origin&#x27;</span> <span class="variable">$http_origin</span>;</span><br><span class="line">    add_header <span class="string">&#x27;Access-Control-Allow-Credentials&#x27;</span> <span class="string">&#x27;true&#x27;</span>;</span><br><span class="line">    add_header Access-Control-Allow-Methods <span class="string">&#x27;GET, POST, OPTIONS&#x27;</span>;</span><br><span class="line">    add_header Access-Control-Allow-Headers <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$request_method</span> = <span class="string">&#x27;OPTIONS&#x27;</span>) &#123;</span><br><span class="line">        add_header <span class="string">&#x27;Access-Control-Allow-Credentials&#x27;</span> <span class="string">&#x27;true&#x27;</span>;</span><br><span class="line">        add_header <span class="string">&#x27;Access-Control-Allow-origin&#x27;</span> <span class="variable">$http_origin</span>;</span><br><span class="line">        add_header <span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span> <span class="string">&#x27;GET, POST, OPTIONS&#x27;</span>;</span><br><span class="line">        add_header <span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span> <span class="string">&#x27;DNT,User-Agent,X-Requested-with,If-Modified-since,Cache-Control,Content-Type,Range&#x27;</span>;</span><br><span class="line">        add_header <span class="string">&#x27;Access-Control-Max-Age&#x27;</span> 1728000;</span><br><span class="line">        add_header <span class="string">&#x27;Content-Type&#x27;</span> <span class="string">&#x27;text/plain; charset=utf-8&#x27;</span>;</span><br><span class="line">        add_header <span class="string">&#x27;Content-Length&#x27;</span> 0;</span><br><span class="line">        <span class="built_in">return</span> 204;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、重启Nginx</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure><p>4、检查防火墙以及安全组是否开放端口，然后测试访问</p><h3 id="宝塔面板"><a href="#宝塔面板" class="headerlink" title="宝塔面板"></a>宝塔面板</h3><p>1、打开<code>软件商店</code>安装必须的环境：<code>jdk</code>、<code>nginx</code>、<code>mysql</code>等</p><p>2、打开<code>网站</code>菜单，添加站点</p><p><img src="https://cs-wlei224.obs.cn-south-1.myhuaweicloud.com/blog-imgs/202408182042155.png" alt="添加站点"><br>3、进入站点目录，上传打包好的前端<code>dist</code></p><p>4、测试访问（有需要的话，可以手动配置nginx的配置文件）</p><h3 id="Docker容器"><a href="#Docker容器" class="headerlink" title="Docker容器"></a>Docker容器</h3><p>1、在服务器的根目录下创建一个<code>services</code>文件夹，然后创建对应的项目文件夹</p><p>2、使用<code>git</code>拉取后端项目源码，或者直接打包上传</p><p>3、在当前前端项目的根目录，创建一个<code>Dockerfile</code>文件，内容如下：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> nginx</span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /usr/share/nginx/html/</span></span><br><span class="line"><span class="keyword">USER</span> root</span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./docker/nginx.conf /etc/nginx/conf.d/default.conf</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./dist  /usr/share/nginx/html/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;nginx&quot;</span>, <span class="string">&quot;-g&quot;</span>, <span class="string">&quot;daemon off;&quot;</span>]</span></span><br></pre></td></tr></table></figure><p>4、在前端项目根目录创建一个<code>docker</code>文件夹，然后创建一个<code>nginx.conf</code>配置文件</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># gzip config</span></span><br><span class="line">    <span class="attribute">gzip</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">gzip_min_length</span> <span class="number">1k</span>;</span><br><span class="line">    <span class="attribute">gzip_comp_level</span> <span class="number">9</span>;</span><br><span class="line">    <span class="attribute">gzip_types</span> text/plain text/css text/javascript application/json application/javascript application/x-javascript application/xml;</span><br><span class="line">    <span class="attribute">gzip_vary</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">gzip_disable</span> <span class="string">&quot;MSIE [1-6]\.&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">root</span> /usr/share/nginx/html;</span><br><span class="line">    <span class="attribute">include</span> /etc/nginx/mime.types;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">try_files</span> <span class="variable">$uri</span> /index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、使用<code>docker build</code>命令构建镜像并运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker build -t smartapi-frontend .</span><br><span class="line">docker run -d -p 80:80 --name xxx-frontend xxx-frontend</span><br><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><p>6、测试访问</p><h2 id="后端部署"><a href="#后端部署" class="headerlink" title="后端部署"></a>后端部署</h2><h3 id="普通上线-1"><a href="#普通上线-1" class="headerlink" title="普通上线"></a>普通上线</h3><p>1、在本地使用<code>Maven</code>打<code>jar</code>包，或者在服务器使用<code>git</code>拉取源码，然后使用Maven命令打包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean package -Dmaven.test.skip=<span class="literal">true</span></span><br></pre></td></tr></table></figure><p>2、上传打包好的<code>jar</code>包到服务器</p><p>3、运行 jar 包，启动命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先以直观的模式启动</span></span><br><span class="line">java -jar xxx-backend-0.0.1-SNAPSHOT.jar --spring.profiles.active=prod</span><br><span class="line"><span class="comment"># 查看是否启动成功，若启动成功，然后再次运行jar包，以后台模式运行</span></span><br><span class="line">java -jar xxx-backend-0.0.1-SNAPSHOT.jar --spring.profiles.active=prod &gt; log.out 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><p>4、通过<code>jobs</code>以及<code>jps</code>命令检查任务的状态</p><blockquote><p><strong>jobs</strong>：</p><ul><li>这是一个Unix和Linux shell中的命令，用来显示由该shell启动的后台作业的状态。当你使用<code>&amp;</code>将一个程序放到后台运行时，你可以用<code>jobs</code>命令来查看这个程序是否还在运行，以及它的运行状态（如正在运行、已停止等）。</li></ul><p><strong>jps</strong>：</p><ul><li>这是Java Platform的Standard Edition（Java SE）提供了一个命令行工具，用于列出正在运行的Java应用程序（JVM）及其进程ID。<code>jps</code>可以跨平台使用，并且不需要任何参数就可以工作，它会显示所有正在运行的Java应用的主类名和进程ID。这对于确定一个Java应用程序是否正在运行以及查找其PID是非常有用的。</li></ul></blockquote><p>5、当我们的代码进行迭代升级之后，我们重新上线jar包，结果会发现端口号被占用了</p><p><img src="https://cs-wlei224.obs.cn-south-1.myhuaweicloud.com/blog-imgs/202409020251086.png" alt="解决项目jar包迭代端口占用的问题"></p><h3 id="宝塔面板-1"><a href="#宝塔面板-1" class="headerlink" title="宝塔面板"></a>宝塔面板</h3><p>1、打开<code>文件</code>菜单，在<code>www/wwwroot</code>目录下创建一个<code>services</code>目录，再创建一个后端项目名字的文件夹，然后上传打包好的<code>jar</code>包到该目录下</p><p>2、打开<code>网站</code>文件夹<br><img src="https://cs-wlei224.obs.cn-south-1.myhuaweicloud.com/blog-imgs/202408182042157.png" alt="添加Java项目"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 项目的执行命令</span></span><br><span class="line">/usr/bin/java -jar -Xmx1024M -Xms256M  /www/wwwroot/user-center-backend/user-center-backend-0.0.1-SNAPSHOT.jar --spring.profiles.active=prod</span><br></pre></td></tr></table></figure><p>3、测试是否启动成功</p><h3 id="Docker容器-1"><a href="#Docker容器-1" class="headerlink" title="Docker容器"></a>Docker容器</h3><p>1、个人习惯在服务器的根目录下创建一个<code>services</code>文件夹，然后创建对应的项目文件夹</p><p>2、使用git拉取后端项目源码，或者直接打包上传</p><p>3、在当前项目根目录编写<code>DockerFile</code></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> maven:<span class="number">3.5</span>-jdk-<span class="number">8</span>-alpine as builder</span><br><span class="line"></span><br><span class="line"><span class="comment"># Copy local code to the container image.</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> pom.xml .</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> src ./src</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Build a release artifact.</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> mvn package -DskipTests</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Run the web service on container startup.</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;java&quot;</span>,<span class="string">&quot;-jar&quot;</span>,<span class="string">&quot;/app/target/user-center-backend-0.0.1-SNAPSHOT.jar&quot;</span>,<span class="string">&quot;--spring.profiles.active=prod&quot;</span>]</span></span><br></pre></td></tr></table></figure><p>3、使用<code>docker build</code>命令构建镜像并运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker build -t user-center-backend:latest .</span><br><span class="line">docker run -d -p 8080:8080 --name user-center-backend user-center-backend:latest</span><br><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><p>4、测试是否启动成功</p><h2 id="场景模拟"><a href="#场景模拟" class="headerlink" title="场景模拟"></a>场景模拟</h2><h3 id="场景一：多war包部署"><a href="#场景一：多war包部署" class="headerlink" title="场景一：多war包部署"></a>场景一：多<code>war</code>包部署</h3><h4 id="场景描述"><a href="#场景描述" class="headerlink" title="场景描述"></a>场景描述</h4><p>在不影响服务器上正常运行的基础上，将多个<code>war</code>包部署到同一个服务器上，并使用<code>nginx</code>进行负载均衡。</p><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>1、使用Docker：</p><ul><li>使用<code>docker</code>创建多个<code>tomcat</code>容器，分别部署多个<code>war</code>包，并使用<code>nginx</code>进行负载均衡。</li></ul><p>2、不使用Docker：</p><ul><li><p>首先，复制一份tomcat</p></li><li><p>进入到 tomcat 的目录下, 将其中的 webapps 文件夹进行一份拷贝, 用于第二个应用的部署</p></li><li><p>进入到 tomcat 的服务配置文件下面, 打开 server.xml 配置文件, 填充第二个应用部署时的相关配置信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 第二个项目配置 --&gt;</span><br><span class="line">&lt;Service name=&quot;Catalina1&quot;&gt;</span><br><span class="line">    </span><br><span class="line">  &lt;!-- 为避免冲突, 修改端口 --&gt;</span><br><span class="line">  &lt;Connector port=&quot;8081&quot; protocol=&quot;HTTP/1.1&quot;</span><br><span class="line">             connectionTimeout=&quot;20000&quot;</span><br><span class="line">             redirectPort=&quot;8443&quot; /&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- Tomcat默认使用8009端口, 避免冲突, 修改 --&gt;</span><br><span class="line">  &lt;Connector port=&quot;8010&quot; protocol=&quot;AJP/1.3&quot; redirectPort=&quot;8443&quot;/&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- Engine 节点, name 修改为 Catalina1 --&gt;</span><br><span class="line">  &lt;!-- 服务启动后会在 conf 下生成相应的引擎文件夹, 名称保持一致. --&gt;</span><br><span class="line">  &lt;Engine name=&quot;Catalina1&quot; defaultHost=&quot;localhost&quot;&gt;</span><br><span class="line">    &lt;Realm className=&quot;org.apache.catalina.realm.LockOutRealm&quot;&gt;</span><br><span class="line">      &lt;Realm className=&quot;org.apache.catalina.realm.UserDatabaseRealm&quot;</span><br><span class="line">             resourceName=&quot;UserDatabase&quot;/&gt;</span><br><span class="line">    &lt;/Realm&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 修改Host节点，appBase修改为需要进行发布的文件位置, 也就是第一步复制的 webapps1 --&gt;</span><br><span class="line">    &lt;Host name=&quot;localhost&quot;  appBase=&quot;webapps1&quot;</span><br><span class="line">          unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;&gt;</span><br><span class="line"></span><br><span class="line">      &lt;Valve className=&quot;org.apache.catalina.valves.AccessLogValve&quot; directory=&quot;logs&quot;</span><br><span class="line">             prefix=&quot;localhost_access_log&quot; suffix=&quot;.txt&quot;</span><br><span class="line">             pattern=&quot;%h %l %u %t &amp;quot;%r&amp;quot; %s %b&quot; /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/Host&gt;</span><br><span class="line">  &lt;/Engine&gt;</span><br><span class="line">&lt;/Service&gt;</span><br></pre></td></tr></table></figure></li><li><p>配置nginx负载均衡，记得<code>nginx -s reload</code></p></li><li><p>脚本启动tomcat，记得<code>start.sh</code></p></li></ul><h3 id="场景二：不停服war包部署"><a href="#场景二：不停服war包部署" class="headerlink" title="场景二：不停服war包部署"></a>场景二：不停服war包部署</h3><h4 id="场景描述-1"><a href="#场景描述-1" class="headerlink" title="场景描述"></a>场景描述</h4><p>在不影响服务器上正常运行的基础上，将<code>war</code>包部署到服务器</p><h4 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h4><blockquote><p>建议：因为设置到war包的不停服更新，所以强烈建议使用<code>docker</code>容器来运行多个<code>tomcat</code>实例，便于迭代升级</p></blockquote><ol><li><p><strong>准备阶段</strong></p><ul><li>确保新版本的WAR包已经准备好并且存放在Tomcat的<code>webapps</code>目录下。</li><li>配置Nginx的反向代理规则，使得对旧服务的请求暂时被代理到备用端口。</li></ul></li><li><p><strong>临时调整Nginx配置</strong></p><ul><li><p>修改Nginx的配置文件，将当前正在运行的服务（端口：8080）请求暂时指向一个备用端口（例如：8081），这通常涉及到修改location块中的代理设置。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> example.com;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://localhost:8081; <span class="comment"># 原本可能是http://localhost:8080</span></span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>重启Nginx使配置生效。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">nginx</span> -s reload</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>部署新版本</strong></p><ul><li>在Tomcat中部署新的WAR包。如果是直接放入<code>webapps</code>目录，Tomcat会自动解压并启动应用。</li><li>确认新版本的应用程序能够正常运行，此时可以访问新版本应用所在的默认端口（例如：8081）来进行测试。</li></ul></li><li><p><strong>恢复Nginx配置</strong></p><ul><li><p>如果新版本没有问题，那么迭代升级成功，如果有问题，那么可以修改Nginx配置文件，重新指向8080端口，进行回滚。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">即：无线上问题？ 保持指向 8081 端口（迭代成功） ： 重新指向 8080 端口进行回滚</span><br></pre></td></tr></table></figure></li><li><p>重启Nginx使配置生效。</p></li></ul></li><li><p><strong>清理旧版本</strong></p><ul><li>如果不再需要旧版本，可以考虑删除旧的WAR包或者备份后删除。</li></ul></li></ol><h4 id="更加便捷的解决方案："><a href="#更加便捷的解决方案：" class="headerlink" title="更加便捷的解决方案："></a>更加便捷的解决方案：</h4><p>除了上述方法外，还有一些更现代化的方法来实现无停机部署，比如使用容器化技术（如Docker）配合Kubernetes等编排工具，它们提供了滚动更新等高级功能，可以在不中断服务的情况下平滑地升级应用程序。</p><h4 id="公司常见做法："><a href="#公司常见做法：" class="headerlink" title="公司常见做法："></a>公司常见做法：</h4><p>不同的公司可能会有不同的做法，但是常见的几种方式包括：</p><ul><li><strong>蓝绿部署</strong>：创建两套相同的环境（蓝色和绿色），其中一套上线，另一套用于部署新版本。一旦新版本验证无误，就切换流量到新版本上。</li><li><strong>金丝雀发布</strong>：逐步将流量引导到新版本，一开始只让一小部分用户访问新版本，如果一切正常，逐渐增加流量比例，直到完全切换。</li><li><strong>滚动更新</strong>：在集群环境中逐个更新实例，确保每次只有一个实例处于更新状态，从而减少对服务的影响。</li></ul><p>以上方法可以根据实际情况和技术栈的选择来决定采用哪种。对于传统的服务器环境，使用Nginx反向代理是一个简单且有效的方案。</p><h2 id="场景综述"><a href="#场景综述" class="headerlink" title="场景综述"></a>场景综述</h2><p>如果你掌握了以上<code>war</code>包迭代升级的技巧，那么，<code>jar</code>包迭代升级的步骤肯定也不在话下了！！！respect🎉🎉🎉</p>]]></content:encoded>
      
      
      <category domain="https://wl2o2o.github.io/categories/Project/">Project</category>
      
      
      <category domain="https://wl2o2o.github.io/tags/%E5%85%AB%E8%82%A1%E6%96%87/">八股文</category>
      
      <category domain="https://wl2o2o.github.io/tags/%E4%B8%8A%E7%BA%BF%E9%A1%B9%E7%9B%AE/">上线项目</category>
      
      
      <comments>https://wl2o2o.github.io/posts/e20116f0.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>EducationNotes</title>
      <link>https://wl2o2o.github.io/posts/ba023cfa.html</link>
      <guid>https://wl2o2o.github.io/posts/ba023cfa.html</guid>
      <pubDate>Sun, 09 Jun 2024 12:53:51 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;教资科目二&quot;&gt;&lt;a href=&quot;#教资科目二&quot; class=&quot;headerlink&quot; title=&quot;教资科目二&quot;&gt;&lt;/a&gt;教资科目二&lt;/h1&gt;&lt;h2 id=&quot;口诀汇总&quot;&gt;&lt;a href=&quot;#口诀汇总&quot; class=&quot;headerlink&quot; title=&quot;口诀汇总&quot;</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="教资科目二"><a href="#教资科目二" class="headerlink" title="教资科目二"></a>教资科目二</h1><h2 id="口诀汇总"><a href="#口诀汇总" class="headerlink" title="口诀汇总"></a>口诀汇总</h2><p><img src="https://cs-wlei224.obs.cn-south-1.myhuaweicloud.com/blog-imgs/202406100056455.png" alt="image-20240610004123258"></p><p><img src="https://cs-wlei224.obs.cn-south-1.myhuaweicloud.com/blog-imgs/202406100056457.png" alt="image-20240610004149098"></p><p><img src="https://cs-wlei224.obs.cn-south-1.myhuaweicloud.com/blog-imgs/202406100056458.png" alt="image-20240610004159949"></p><p><img src="https://cs-wlei224.obs.cn-south-1.myhuaweicloud.com/blog-imgs/202406100056459.png" alt="image-20240610004208858"></p><p><img src="https://cs-wlei224.obs.cn-south-1.myhuaweicloud.com/blog-imgs/202406100056460.png" alt="image-20240610004215361"></p><h2 id="单选题"><a href="#单选题" class="headerlink" title="单选题"></a>单选题</h2><blockquote><p>单选题：第一、四、七章节，共十九个考点。</p></blockquote><h3 id="考点一：教育的本质属性与社会属性"><a href="#考点一：教育的本质属性与社会属性" class="headerlink" title="考点一：教育的本质属性与社会属性"></a>考点一：教育的本质属性与社会属性</h3><p><img src="https://cs-wlei224.obs.cn-south-1.myhuaweicloud.com/blog-imgs/202406100056461.png" alt="Snipaste_2024-06-09_21-43-16"></p><h3 id="考点二：教育学的产生与发展"><a href="#考点二：教育学的产生与发展" class="headerlink" title="考点二：教育学的产生与发展"></a>考点二：教育学的产生与发展</h3><blockquote><p>考点：人物与思想和著作的对应！</p></blockquote><p><img src="https://cs-wlei224.obs.cn-south-1.myhuaweicloud.com/blog-imgs/202406100056463.png" alt="Snipaste_2024-06-09_21-44-08"></p><p><img src="https://cs-wlei224.obs.cn-south-1.myhuaweicloud.com/blog-imgs/202406100056464.png" alt="Snipaste_2024-06-09_21-44-41"></p><blockquote><p>补充：有教无类、学而优则仕、启发诱导。。。都属于孔子写进《论语》的。</p></blockquote><p><img src="https://cs-wlei224.obs.cn-south-1.myhuaweicloud.com/blog-imgs/202406100056465.png" alt="image-20240609214604779"></p><p><img src="https://cs-wlei224.obs.cn-south-1.myhuaweicloud.com/blog-imgs/202406100056466.png" alt="image-20240609215033189"></p><p><img src="https://cs-wlei224.obs.cn-south-1.myhuaweicloud.com/blog-imgs/202406100056467.png" alt="image-20240609215120149"></p><h3 id="考点三：生产力与教育的关系"><a href="#考点三：生产力与教育的关系" class="headerlink" title="考点三：生产力与教育的关系"></a>考点三：生产力与教育的关系</h3><blockquote><p>比较高频，考了9次；考点四考了6次。</p></blockquote><p><img src="https://cs-wlei224.obs.cn-south-1.myhuaweicloud.com/blog-imgs/202406100056468.png" alt="image-20240609215157306"></p><h3 id="考点四：有关教育目的的理论"><a href="#考点四：有关教育目的的理论" class="headerlink" title="考点四：有关教育目的的理论"></a>考点四：有关教育目的的理论</h3><blockquote><p>考点：考观点、人物和他的理论的对应!（哪个人物属于什么本位论不常考）<br>TIP：社会本位论如何理解？ 答：为了社会发展教育即社会本位论，个人本位论亦是如此！</p></blockquote><p><img src="https://cs-wlei224.obs.cn-south-1.myhuaweicloud.com/blog-imgs/202406100056469.png" alt="image-20240609215236462"></p><h3 id="考点五：课程的类型"><a href="#考点五：课程的类型" class="headerlink" title="考点五：课程的类型"></a>考点五：课程的类型</h3><p><img src="https://cs-wlei224.obs.cn-south-1.myhuaweicloud.com/blog-imgs/202406100056470.png" alt="image-20240609215338361"></p><h3 id="考点六：课程内容"><a href="#考点六：课程内容" class="headerlink" title="考点六：课程内容"></a>考点六：课程内容</h3><p><img src="https://cs-wlei224.obs.cn-south-1.myhuaweicloud.com/blog-imgs/202406100056471.png" alt="image-20240609215409495"></p><p><img src="https://cs-wlei224.obs.cn-south-1.myhuaweicloud.com/blog-imgs/202406100056472.png" alt="image-20240610000353487"></p><blockquote><p>何为螺旋式编排方式？  答：指同样的内容可能会重复出现，但是后面的内容难度逐渐加深。</p></blockquote><h3 id="考点七：新课改的课程结构"><a href="#考点七：新课改的课程结构" class="headerlink" title="考点七：新课改的课程结构"></a>考点七：新课改的课程结构</h3><p><img src="https://cs-wlei224.obs.cn-south-1.myhuaweicloud.com/blog-imgs/202406100056473.png" alt="image-20240610000430600"></p><blockquote><p>指导纲要TIP：一研、二社、二技</p></blockquote><h3 id="考点八：教学原则"><a href="#考点八：教学原则" class="headerlink" title="考点八：教学原则"></a>考点八：教学原则</h3><p><img src="https://cs-wlei224.obs.cn-south-1.myhuaweicloud.com/blog-imgs/202406100056474.png" alt="image-20240610000521200"></p><h3 id="考点九：教学方法"><a href="#考点九：教学方法" class="headerlink" title="考点九：教学方法"></a>考点九：教学方法</h3><p><img src="https://cs-wlei224.obs.cn-south-1.myhuaweicloud.com/blog-imgs/202406100056475.png" alt="image-20240610000559255"></p><h3 id="考点十：教学评价的分类"><a href="#考点十：教学评价的分类" class="headerlink" title="考点十：教学评价的分类"></a>考点十：教学评价的分类</h3><p><img src="https://cs-wlei224.obs.cn-south-1.myhuaweicloud.com/blog-imgs/202406100056476.png" alt="image-20240610000625097"></p><h3 id="考点十一：注意的分类"><a href="#考点十一：注意的分类" class="headerlink" title="考点十一：注意的分类"></a>考点十一：注意的分类</h3><p><img src="https://cs-wlei224.obs.cn-south-1.myhuaweicloud.com/blog-imgs/202406100056477.png" alt="image-20240610000657291"></p><h3 id="考点十二：学习动机的分类"><a href="#考点十二：学习动机的分类" class="headerlink" title="考点十二：学习动机的分类"></a>考点十二：学习动机的分类</h3><p><img src="https://cs-wlei224.obs.cn-south-1.myhuaweicloud.com/blog-imgs/202406100056478.png" alt="image-20240610000841254"></p><h3 id="考点十三：学习迁移的分类"><a href="#考点十三：学习迁移的分类" class="headerlink" title="考点十三：学习迁移的分类"></a>考点十三：学习迁移的分类</h3><p><img src="https://cs-wlei224.obs.cn-south-1.myhuaweicloud.com/blog-imgs/202406100056479.png" alt="image-20240610000919999"></p><p><img src="https://cs-wlei224.obs.cn-south-1.myhuaweicloud.com/blog-imgs/202406100056480.png" alt="image-20240610001014033"></p><p><img src="https://cs-wlei224.obs.cn-south-1.myhuaweicloud.com/blog-imgs/202406100056481.png" alt="image-20240610001059494"></p><h3 id="考点十四：学习策略的分类"><a href="#考点十四：学习策略的分类" class="headerlink" title="考点十四：学习策略的分类"></a>考点十四：学习策略的分类</h3><p><img src="https://cs-wlei224.obs.cn-south-1.myhuaweicloud.com/blog-imgs/202406100056482.png" alt="image-20240610001139652"></p><h3 id="考点十五：中学生常见的心理障碍"><a href="#考点十五：中学生常见的心理障碍" class="headerlink" title="考点十五：中学生常见的心理障碍"></a>考点十五：中学生常见的心理障碍</h3><p><img src="https://cs-wlei224.obs.cn-south-1.myhuaweicloud.com/blog-imgs/202406100056483.png" alt="image-20240610001227705"></p><h3 id="考点十六：心理辅导的方法"><a href="#考点十六：心理辅导的方法" class="headerlink" title="考点十六：心理辅导的方法"></a>考点十六：心理辅导的方法</h3><p><img src="https://cs-wlei224.obs.cn-south-1.myhuaweicloud.com/blog-imgs/202406100056485.png" alt="image-20240610001327037"></p><h3 id="考点十七：品德发展阶段理论"><a href="#考点十七：品德发展阶段理论" class="headerlink" title="考点十七：品德发展阶段理论"></a>考点十七：品德发展阶段理论</h3><p><img src="https://cs-wlei224.obs.cn-south-1.myhuaweicloud.com/blog-imgs/202406100056486.png" alt="image-20240610001412693"></p><h3 id="考点十八：德育的原则"><a href="#考点十八：德育的原则" class="headerlink" title="考点十八：德育的原则"></a>考点十八：德育的原则</h3><p><img src="https://cs-wlei224.obs.cn-south-1.myhuaweicloud.com/blog-imgs/202406100056487.png" alt="image-20240610001536789"></p><h3 id="考点十九：德育方法"><a href="#考点十九：德育方法" class="headerlink" title="考点十九：德育方法"></a>考点十九：德育方法</h3><p><img src="https://cs-wlei224.obs.cn-south-1.myhuaweicloud.com/blog-imgs/202406100056488.png" alt="image-20240610001625826"></p><h2 id="辨析题"><a href="#辨析题" class="headerlink" title="辨析题"></a>辨析题</h2><blockquote><p>评分标准：先判断正误，判断失误则零分。</p></blockquote><h3 id="考点分布："><a href="#考点分布：" class="headerlink" title="考点分布："></a><em><strong>考点分布</strong></em>：</h3><p><img src="https://cs-wlei224.obs.cn-south-1.myhuaweicloud.com/blog-imgs/202406100056489.png" alt="image-20240610002057877"></p><p><img src="https://cs-wlei224.obs.cn-south-1.myhuaweicloud.com/blog-imgs/202406100056490.png" alt="image-20240610002126609"></p><h3 id="考点汇总："><a href="#考点汇总：" class="headerlink" title="考点汇总："></a>考点汇总：</h3><p><img src="https://cs-wlei224.obs.cn-south-1.myhuaweicloud.com/blog-imgs/202406100056491.png" alt="image-20240610001916112"></p><p><img src="https://cs-wlei224.obs.cn-south-1.myhuaweicloud.com/blog-imgs/202406100056492.png" alt="image-20240610002004707"></p><h2 id="材料分析题"><a href="#材料分析题" class="headerlink" title="材料分析题"></a>材料分析题</h2><h3 id="命题规律："><a href="#命题规律：" class="headerlink" title="命题规律："></a>命题规律：</h3><p><img src="https://cs-wlei224.obs.cn-south-1.myhuaweicloud.com/blog-imgs/202406100056493.png" alt="image-20240610002235876"></p><h3 id="考点汇总：-1"><a href="#考点汇总：-1" class="headerlink" title="考点汇总："></a>考点汇总：</h3><p><img src="https://cs-wlei224.obs.cn-south-1.myhuaweicloud.com/blog-imgs/202406100056494.png" alt="image-20240610002303889"></p><h2 id="简答题"><a href="#简答题" class="headerlink" title="简答题"></a>简答题</h2><blockquote><p>1.一般是前两道是教育学的，后两道是心理学的<br>2.考试可能会出现超纲题目，要有心理准备</p></blockquote><h3 id="不会写？如何编？"><a href="#不会写？如何编？" class="headerlink" title="不会写？如何编？"></a>不会写？如何编？</h3><p><img src="https://cs-wlei224.obs.cn-south-1.myhuaweicloud.com/blog-imgs/202406100056495.png" alt="image-20240610002356128"></p><h3 id="29个一级简答题汇总"><a href="#29个一级简答题汇总" class="headerlink" title="29个一级简答题汇总"></a>29个一级简答题汇总</h3><blockquote><p>1.简述生产力与教育的关系。</p></blockquote><p> （1）生产力对教育的制约作用——生产力水平决定教育发展水平。<br> ①生产力水平决定教育的规模和速度。<br> ②生产力制约人才培养的规格和教育结构。<br> ③生产力制约教学内容、方法、组织形式与手段。<br> <strong>口诀：龟（规模）速（速度）够（结构）防（方法）守（手段）</strong><br> （2）教育对生产力的促进作用——经济功能。<br> ①教育是劳动力再生产的基本途径。<br> ②教育是科学知识再生产的最有效形式。<br> ③教育是进行技术创新的一个重要手段。<br> <strong>口诀：两再（劳动力再生产和科学知识再生产）一新（技术创新）促生产</strong></p><blockquote><p>2.简述影响人身心发展的因素。</p></blockquote><p> （1）遗传。指人从上代继承下来的生理解剖上的特点，如机体的结构、形态、感官和神经系统等的特点。它是人发展的生理前提，为人的发展提供可能性。<br> （2）环境。泛指个体生活中影响个体身心发展的一切外部因素，包括自然环境和社会环境，它使遗传提供的发展可能性变成现实。<br> （3）学校教育。它在人的发展中起主导作用。<br> （4）个体的主观能动性。指人的主观意识对客观世界的反映和能动作用，是人的身心发展的内在动力。<br> <strong>口诀：遗传+环境+学校教育+主观能动性</strong></p><blockquote><p>3.简述确立我国教育目的的依据。</p></blockquote><p> （1）特定的社会政治、经济、文化背景。<br> （2）受教育者的身心发展规律。<br> （3）人们的教育思想。<br> （4）马克思关于人的全面发展学说。</p><p> <strong>口诀：马克思是社会人（受教育身心发展规律、人们教育思想）</strong></p><blockquote><p>4.简述课程内容的文本表现形式。</p></blockquote><p> （1）课程计划。<br> 课程计划是根据教育目的和不同类型学校的教育任务，由国家教育主管部门制定的有关教学和教育工作的指导性文件。<br> （2）课程标准。<br> 课程标准是课程计划的具体化，是以纲要形式编定的有关学科教学内容的指导性文件。<br> （3）教材。<br> 教材是教师和学生据以进行教学活动的材料，包括教科书、讲义、参考书等。</p><p> <strong>口诀：课程文本有三种，计划（课程计划）、课标（课程标准）和教材</strong></p><blockquote><p>5.教材编写的原则与要求。</p></blockquote><p> （1）科学性与思想性统一；<br> （2）强调内容的基础性与适切性；<br> （3）知识的内在逻辑与教学法要求统一；<br> （4）理论与实践统一；<br> （5）教科书的编排形式要有利于学生的学习；<br> （6）注意与其他学科的纵向和横向联系。</p><blockquote><p>6.简述新课程改革的结构。</p></blockquote><p> 新课程改革整体设置九年一贯的义务教育课程。<br> （1）小学阶段以综合课程为主，初中阶段设置分科与综合相结合的课程。<br> （2）高中阶段以分科课程为主，设置丰富多样的选修课程，开设技术类课程，积极试行学分制管理。<br> （3）从小学至高中设置综合实践活动课程并作为必修课程。<br> （4）农村中学课程要为当地社会经济发展服务。<br> <strong>口诀：小综（小学综合课程）高分（高中分科）初结合（初中分科与综合相结合），一到十二（从小学到高中）综必修（综合实践活动是必修课）</strong></p><blockquote><p> 7.简述我国现阶段的教学任务。</p></blockquote><p> （1）使学生掌握系统的现代科学基础知识和基本技能。<br> （2）发展学生智能，特别是培养学生的能力和创造力。<br> （3）发展学生体力，促进学生的身体健康。<br> （4）培养学生科学的世界观、良好的思想品德、健康的审美情趣和良好的心理素质。<br> <strong>口诀：双基（基础知识和基本技能）+德（思想品德）、智（智能）、体（体力）、美（审美）</strong></p><blockquote><p> 8.简述教学过程的结构。</p></blockquote><p> （1）激发学习动机。<br> （2）领会知识。<br> （3）巩固知识。<br> （4）运用知识。<br> （5）检查知识。<br> <strong>口诀：请机（激发）灵（领会）的姑姑（巩固）用（运用）茶（检查）</strong></p><blockquote><p> 9.简述影响问题解决的主要因素。</p></blockquote><p> （1）问题情境。<br> （2）心理定势与功能固着。<br> （3）已有的知识经验——迁移。<br> （4）原型启发。<br> （5）情绪与动机。<br> 除了上述因素，个体的智力水平、性格特征、认知风格和世界观等个性心理特性也制约着<br> 问题解决的方向和效果。<br> <strong>口诀：稳（问题情境）定（心理定势）工（功能固着）作，千（迁移）元（原型启发）请（情绪）不动（动机）你</strong></p><blockquote><p> 10.简述学生学习的特点。</p></blockquote><p> （1）学生的学习是以掌握间接知识经验为主的。<br> （2）学生的学习是在教师有目的、有计划、有组织的指导下进行的。<br> （3）学生学习的主要任务是掌握系统的科学知识、技能，形成科学的世界观和良好的道德品质。<br> （4）学生的学习是在学校班集体中进行的。<br> （5）学生的学习具有一定程度的被动性。<br> <strong>口诀：尖（间接知识）叫（教师指导）的系统班（班集体）很被动（被动性）</strong></p><blockquote><p> 11.简述有意义学习的实质及条件。</p></blockquote><p> （1）有意义学习的实质：有意义学习的实质是将新知识与已有知识建立起非人<br> 为 （内在的）的和实质性（非字面）的联系。<br> （2）有意义学习的条件：<br> ①学习材料的逻辑意义；<br> ②有意义学习的心向；<br> ③学习者认知结构中必须具有适当的知识，以便与新知识进行联系。<br> <strong>口诀：材料意义+新旧知识+心向</strong></p><blockquote><p> 12.简述马斯洛需要层次论。</p></blockquote><p> （1）生理需要：指人类维持自身生存需要的最基本的需求。<br> （2）安全需要：寻求依赖和保护，避免危险与灾难，维持自我生存的需要。<br> （3）归属与爱的需要：包括被人爱与热爱他人。<br> （4）尊重的需要：表现为自尊和受到别人尊重。<br> （5）求知需要：是克服障碍和解决问题的工具。<br> （6）审美需要：对美、秩序和平衡的需要。<br> （7）自我实现的需要：是充分发挥个人潜能和才能、实现自我理想的心理需要。</p><blockquote><p> 13.简述如何培养和激发学生的学习动机。</p></blockquote><p> 如何培养学生的学习动机：<br> （1）了解和满足学生的需要，促使学习动机的产生。<br> （2）重视立志教育，对学生进行成就动机训练。<br> （3）帮助学生确立正确的自我概念，获得自我效能感。<br> （4）培养学生努力导致成功的归因观。 </p><p> <strong>口诀：学生需要（学生的需要）立志（立志教育），效能（自我效能感）源自努力</strong><br> 如何激发学生的学习动机：<br> （1）创设问题情境，实施启发式教学。<br> （2）根据作业难度，恰当控制动机水平。<br> （3）充分利用反馈信息，妥善进行奖惩。<br> （4）正确指导结果归因，促使学生继续努力。 口诀：控制奖惩，启发归因<br> <strong>口诀：控制奖惩、启发归因</strong></p><blockquote><p> 14.简述有效促进学习迁移的教学。</p></blockquote><p> （1）精选教材；<br> （2）合理编排教学内容；<br> （3）合理安排教学程序；<br> （4）教授学习策略，提高迁移意识性。<br> <strong>口诀：二排（编排、安排）精（精选教材）授（传授）</strong></p><blockquote><p> 15.简述认知策略的内容。</p></blockquote><p> 复述策略：复述策略是指为了在记忆中保持所学信息而对信息进行重复识记的策略。<br> 精细加工策略：精加工策略是一种将新学材料与头脑中已有知识联系起来，从而增<br> 加新信息的意义的深层加工策略。<br> 组织策略：组织策略是指整合所学新知识之间、新旧知识之间的内在联系，形成新<br> 的知识结构的策略。</p><blockquote><p> 16.简述最近发展区及启示。</p></blockquote><p> （1）最近发展区的含义：维果斯基认为，儿童有两种发展水平：一是儿童的现有<br> 水平，二是即将达到的发展水平。这两种水平之间的差异就是最近发展区。<br> （2）最近发展区的启示：<br> 教学应着眼于学生的最近发展区，把潜在的发展水平变成现实的发展水平，并创造<br> 新的最近发展区。维果斯基特别提出：“ 教学应当走在发展的前面。”<br> <strong>口诀：现在将来有差异，潜在变现实，发展走在前</strong></p><blockquote><p> 17.简述不同气质类型的教育措施。</p></blockquote><p> （1）针对胆汁质的学生，老师应该直截了当地告诉学生，而且对学生的批评一定要有说服力；<br> 同时要培养学生坚持、自制等品质，但也应该帮助学生克服鲁莽和莽撞的缺点。<br> （2）针对多血质的学生，老师可以采用多种多样的教育方式。老师要为他们创造条件，多给<br> 他们一些活动的机会。要定期提醒，培养其专一的品质，防止见异思迁。<br> （3）针对黏液质的学生，老师可以采取耐心教育的方式。老师要让他们有考虑和做出反应的<br> 足够时间，要培养其生气勃勃的精神、热情开朗的个性和以诚待人、工作踏实的优点。<br> （4）针对抑郁质的学生，老师可以采取委婉暗示的方式。老师要对其多关心、爱护，不要在<br> 公开场合对其严厉指责和批评，培养他们亲切、友好、善于交往、富有自信的精神。<br> <strong>口诀：胆汁要直接，多血要专一、黏液有耐心、抑郁求委婉</strong></p><blockquote><p> 18.学校开展心理健康教育的途径。</p></blockquote><p> （1）开设心理健康教育有关课程。<br> （2）开设心理辅导活动课。<br> （3）在学科教学中渗透心理健康教育的内容。<br> （4）结合班级、团队活动开展心理健康教育。<br> （5）个别心理辅导或咨询。<br> （6）小组辅导。<br> <strong>口诀：开课（心理健康课、心理辅导课）+渗透（学科渗透）+辅导（个别辅导、</strong><br> <strong>小组辅导）</strong></p><blockquote><p> 19.促进中学生形成良好品德的方法</p></blockquote><p> （1）有效的说服<br> （2）树立良好的榜样<br> （3）利用同伴（群体）约定<br> （4）价值辨析<br> （5）给予适当的奖励与惩罚<br> （6）角色扮演<br> （7）小组道德讨论<br> <strong>口诀：演讲小说定价榜</strong></p><blockquote><p> 20.简述德育过程的基本规律。</p></blockquote><p> （1）德育过程是促使学生的知、情、意、行互动发展的过程。<br> （2）德育过程是组织学生的活动和交往，统一多方面教育影响的过程。<br> （3）德育过程是促进学生的思想品德内部矛盾积极转化的过程。<br> （4）德育过程是一个长期、反复、逐步提高的过程。<br> <strong>口诀：脚（活动和交往）趾（知情意行）长（长期）毛（矛盾）</strong></p><blockquote><p> 21.简述贯彻疏导原则的要求。</p></blockquote><p> （1）讲明道理，疏导思想。<br> （2）因势利导，循循善诱。<br> （3）以表扬激励为主，坚持正面教育。<br> <strong>口诀：讲理（讲明道理）又（循循善诱）表扬（表扬激励）</strong></p><blockquote><p> 22.简述贯彻尊重与严格要求原则的要求。</p></blockquote><p> （1）教育者要有强烈的责任感以及尊重学生的态度，关心爱护学生，尤其是对待<br> 后进生。<br> （2）教育者应根据教育目的和德育目标，对学生严格要求，认真管理。<br> （3）教育者要向学生提出合理而严格的道德要求。<br> <strong>口诀：关心（关心爱护学生）和严格（严格要求）并行，合理而严格要求</strong></p><blockquote><p> 23.简述贯彻依靠积极因素、克服消极因素原则的要求。</p></blockquote><p> （1）教育者要用一分为二的观点，全面分析，客观地评价学生的优点和缺点。<br> （2）教育者要有意识地创造条件，将学生思想中的消极因素转化为积极因素。<br> （3）教育者要提高学生自我认识、自我评价的能力，启发学生自觉思考，克服缺点，发扬优点。<br> <strong>口诀：一分为二的转化（消极因素转化为积极因素）优点（发扬有点）</strong></p><blockquote><p> 24.简述贯彻知行统一原则的要求。</p></blockquote><p> （1）加强思想道德的理论教育，提高学生的思想道德认识。<br> （2）注重组织实践活动，培养道德行为习惯。<br> （3）对学生的评价和要求要坚持知行统一的原则。<br> （4）教育者要以身作则，严于律己。<br> <strong>口诀：认识活动，统一作则</strong></p><blockquote><p> 25.简述贯彻榜样示范法的要求。</p></blockquote><p> （1）选好学习的榜样。选好榜样是学习榜样的前提。我们应根据时代要求和学生<br> 实际情况，指导他们选择好学习的榜样，获得前进的明确方向和巨大动力。<br> （2）激起学生对榜样的敬慕之情。要使榜样能对学生产生激励作用，推动他们前<br> 进，就需要引导学生了解榜样。<br> （3）引导学生用榜样来调节行为，提高修养。要及时地把学生的情感、冲动引导<br> 到行动上来，把敬慕之情转化为道德行为和习惯，逐步巩固、加深这种情感。<br> <strong>口诀：好（选好榜样）情（敬慕之情）行（调节行为）</strong></p><blockquote><p> 26.简述中学德育的途径。</p></blockquote><p> （1）思想政治课与其他学科教学。<br> （2）社会实践活动。<br> （3）课外活动。<br> （4）共青团组织的活动。<br> （5）班会、校会、周会、晨会。<br> （6）班主任工作。<br> <strong>口诀：一教（学科教学）二班（班会和班主任工作）三活</strong></p><blockquote><p> 27.简述班集体形成标志。</p></blockquote><p> （1）坚定正确的政治方向与明确的奋斗目标。<br> （2）健全的组织机构与坚强的领导核心。<br> （3）严格的规章制度与严明的组织纪律。<br> （4）正确的集体舆论与良好的班风。<br> <strong>口诀：健全班风是组织的目标</strong></p><blockquote><p> 28.简述班主任的个别教育工作。</p></blockquote><p> 班主任对优等生的个别教育工作：<br> （1）严格要求，防止自满。<br> （2）不断激励，提高抗挫折能力。<br> （3）消除嫉妒，公平竞争。<br> （4）发挥优势，带动全班。<br> <strong>口诀：严要求，常激励，消嫉妒，用优势</strong></p><blockquote><p> 29.简述教师成长与发展的基本途径。</p></blockquote><p> （1）观摩和分析优秀教师的教学活动。<br> （2）开展微格教学。<br> （3）进行专门训练。<br> （4）反思教学经验<br> <strong>口诀：看别人，看自己，多练习，多反思</strong></p>]]></content:encoded>
      
      
      
      
      <comments>https://wl2o2o.github.io/posts/ba023cfa.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Cookie, Session和token的区别</title>
      <link>https://wl2o2o.github.io/posts/915d26fb.html</link>
      <guid>https://wl2o2o.github.io/posts/915d26fb.html</guid>
      <pubDate>Mon, 03 Jun 2024 11:34:53 GMT</pubDate>
      
      <description>【用图说话系列】用六张图讲清楚Cookie, Session和token的区别</description>
      
      
      
      <content:encoded><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/wl2o2o/blogCdn/img/Cookie-Session%E5%92%8Ctoken%E7%9A%84%E5%8C%BA%E5%88%AB-2024-06-03-20-32-49.png" alt="Cookie-Session和token的区别-2024-06-03-20-32-49"></p><p><img src="https://cdn.jsdelivr.net/gh/wl2o2o/blogCdn/img/Cookie-Session%E5%92%8Ctoken%E7%9A%84%E5%8C%BA%E5%88%AB-2024-06-03-20-33-35.png" alt="Cookie-Session和token的区别-2024-06-03-20-33-35"></p><p><img src="https://cdn.jsdelivr.net/gh/wl2o2o/blogCdn/img/Cookie-Session%E5%92%8Ctoken%E7%9A%84%E5%8C%BA%E5%88%AB-2024-06-03-20-33-51.png" alt="Cookie-Session和token的区别-2024-06-03-20-33-51"></p><p><img src="https://cdn.jsdelivr.net/gh/wl2o2o/blogCdn/img/Cookie-Session%E5%92%8Ctoken%E7%9A%84%E5%8C%BA%E5%88%AB-2024-06-03-20-34-13.png" alt="Cookie-Session和token的区别-2024-06-03-20-34-13"></p><p><img src="https://cdn.jsdelivr.net/gh/wl2o2o/blogCdn/img/Cookie-Session%E5%92%8Ctoken%E7%9A%84%E5%8C%BA%E5%88%AB-2024-06-03-20-34-20.png" alt="Cookie-Session和token的区别-2024-06-03-20-34-20"></p><p><img src="https://cdn.jsdelivr.net/gh/wl2o2o/blogCdn/img/Cookie-Session%E5%92%8Ctoken%E7%9A%84%E5%8C%BA%E5%88%AB-2024-06-03-20-34-38.png" alt="Cookie-Session和token的区别-2024-06-03-20-34-38"></p>]]></content:encoded>
      
      
      <category domain="https://wl2o2o.github.io/categories/Java-notes/">Java notes</category>
      
      
      <category domain="https://wl2o2o.github.io/tags/%E5%85%AB%E8%82%A1%E6%96%87/">八股文</category>
      
      <category domain="https://wl2o2o.github.io/tags/%E9%9D%A2%E8%AF%95%E9%80%86%E8%A2%AD/">面试逆袭</category>
      
      
      <comments>https://wl2o2o.github.io/posts/915d26fb.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>oj</title>
      <link>https://wl2o2o.github.io/posts/edbedd1.html</link>
      <guid>https://wl2o2o.github.io/posts/edbedd1.html</guid>
      <pubDate>Sat, 18 May 2024 08:56:11 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;在线判题系统&quot;&gt;&lt;a href=&quot;#在线判题系统&quot; class=&quot;headerlink&quot; title=&quot;在线判题系统&quot;&gt;&lt;/a&gt;在线判题系统&lt;/h1&gt;&lt;p&gt;该项目是基于微服务的算法题在线评测系统，分为网关、用户、在线判题和代码沙箱4个微服务，其中用户和网关微服务复</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="在线判题系统"><a href="#在线判题系统" class="headerlink" title="在线判题系统"></a>在线判题系统</h1><p>该项目是基于微服务的算法题在线评测系统，分为网关、用户、在线判题和代码沙箱4个微服务，其中用户和网关微服务复用了之前的开发社区项目。在系统前台，管理员可以创建、管理题目，用户可以搜索、查看题目，编写代码并进行在线自测和提交。在系统后端，自主实现了代码沙箱，能够根据接收的测试用例对代码进行编译、运行并给出输出结果。代码沙箱作为独立服务，可以提供给其他开发者使用。</p><p>用React + Ant Design Pro那一套搭建的前端，后端实现了ACM模式的本地代码沙箱和Args模式的Docker沙箱（线上使用的是本地代码沙箱），实现了提交统计，支持在线测试，使用了API签名认证（只用了AK&#x2F;SK），最后，为了方便开发者用户调用我实现的代码沙箱，写了一个SDK。</p><p>项目的部署使用的是自己搭建的服务器，使用IPv6+DDNS实现公网访问。如果你无法访问，可能是由于你的网络环境<strong>不支持IPv6（通常是公司内网和校园网）</strong>，你可以到<a href="https://test-ipv6.com/">IPv6 测试 (test-ipv6.com)</a>这个网站测试你是否支持IPv6，如果不支持可以连接手机热点后访问，手机网络一般支持IPv6</p><p>在线访问：<a href="http://oj.zqk.asia/">流火Judge</a>（测试账号：<a href="mailto:&#111;&#x6a;&#64;&#113;&#113;&#x2e;&#99;&#x6f;&#109;">&#111;&#x6a;&#64;&#113;&#113;&#x2e;&#99;&#x6f;&#109;</a> 密码：12345678）</p><p>github仓库：</p><ul><li>后端：<a href="https://github.com/qk-antares/antares-oj-backend">qk-antares&#x2F;antares-oj-backend (github.com)</a></li><li>前端：<a href="https://github.com/qk-antares/antares-oj-frontend">qk-antares&#x2F;antares-oj-frontend (github.com)</a></li></ul><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><p><img src="http://image.antares.cool/PicGo/Project/OJ/461b8c0b478c26f0698c478dd8e0609d8c460332.png" alt="image-20230903153456627"></p><p>gateway和member我直接复用之前的博客项目了，详情见<a href="https://github.com/qk-antares/antares-blog-backend">qk-antares&#x2F;antares-blog-backend (github.com)</a></p><h2 id="前端页面"><a href="#前端页面" class="headerlink" title="前端页面"></a>前端页面</h2><h3 id="首页"><a href="#首页" class="headerlink" title="首页"></a>首页</h3><p><img src="http://image.antares.cool/PicGo/Project/OJ/51bc61d027a6cd36adfae175b8eb1a557d833325.png" alt="image-20230904004237071"></p><h3 id="题目详情页"><a href="#题目详情页" class="headerlink" title="题目详情页"></a>题目详情页</h3><p><img src="http://image.antares.cool/PicGo/Project/OJ/41a6c9e7da20588dfd56bb296ecf5ed3d3d8d3db.png" alt="image-20230904005445502"></p><p>这里是高仿LeetCode，右下角支持打开控制台输入自定义的输入然后获取执行结果</p><p><img src="http://image.antares.cool/PicGo/Project/OJ/c72e399f92091e2a0df8c89fc5b9b6608444bb72.png" alt="image-20230904010000773"></p><p>题解界面就不说了，简单地展示解析</p><p>提交记录页面可以查看历史提交的代码和通过信息：</p><p><img src="http://image.antares.cool/PicGo/Project/OJ/d4405e299729d568a4ae72d3e823f834f21d5176.png" alt="image-20230904010244838"></p><p><img src="http://image.antares.cool/PicGo/Project/OJ/6808bf0fb6b5de97acd58b0053c6e4da77da1eed.png" alt="image-20230904010304298"></p><h3 id="管理页"><a href="#管理页" class="headerlink" title="管理页"></a>管理页</h3><p><img src="http://image.antares.cool/PicGo/Project/OJ/13d07367014c503876e830c754afc792eaf7f398.png" alt="image-20230904010359859"></p><p><img src="http://image.antares.cool/PicGo/Project/OJ/a8795a8594ad50e068e939b3e47aadcc75712cd7.png" alt="image-20230904010432931"></p><p><img src="http://image.antares.cool/PicGo/Project/OJ/0e8e289500cd189e210619cee0de162538a86c5c.png" alt="image-20230904083454196"></p><hr><h2 id="后端技术点"><a href="#后端技术点" class="headerlink" title="后端技术点"></a>后端技术点</h2><h3 id="API签名认证"><a href="#API签名认证" class="headerlink" title="API签名认证"></a>API签名认证</h3><p>什么是API签名认证</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">API签名认证（API Signature Authentication）是一种用于保护Web API（Application Programming Interface，应用程序编程接口）的身份验证机制。它用于验证发送API请求的客户端或用户的身份，并确保请求数据在传输过程中没有被篡改。API签名认证通常涉及以下步骤：</span><br><span class="line">①请求创建： 客户端创建API请求，并包括必要的请求参数、数据和请求头。</span><br><span class="line">②签名生成： 客户端使用预共享的密钥（API密钥或令牌）和一些请求信息（如HTTP方法、请求URL、时间戳等）来生成一个唯一的数字签名。签名生成通常使用哈希算法（如HMAC-SHA256）来加密这些信息。</span><br><span class="line">③签名附加： 客户端将生成的数字签名附加到API请求中，通常是在请求头、请求参数或特定的请求字段中。</span><br><span class="line">④服务器验证： 服务端收到API请求后，会使用相同的密钥和接收到的请求信息来生成签名。然后，它将生成的签名与请求中的签名进行比较。</span><br><span class="line">⑤比较签名： 服务器将客户端提供的签名与自己生成的签名进行比较。如果两者匹配，说明请求是有效的，客户端身份已验证。如果签名不匹配，请求将被视为无效或潜在的恶意请求。</span><br><span class="line"></span><br><span class="line">API签名认证的优点包括：</span><br><span class="line">①身份验证： 确保请求的发送方是已授权的客户端或用户。</span><br><span class="line">②数据完整性： 通过签名验证，可以确保请求数据在传输过程中没有被篡改。</span><br><span class="line">③安全性： API密钥等敏感信息不会在请求中明文传输，从而增加了安全性。</span><br><span class="line">④防止重放攻击： 通过时间戳或一次性令牌，API签名可以有效防止恶意重复使用请求。</span><br><span class="line"></span><br><span class="line">API签名认证是保护API安全的一种重要方式，特别是在公共互联网上运行的API服务中。许多云服务提供商和Web应用程序框架都支持API签名认证，开发人员可以利用这些工具来轻松实现API身份验证和数据保护。</span><br></pre></td></tr></table></figure><p>在我的项目中，API签名认证是在调用代码沙箱的这个过程，核心代码片段如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">GATEWAY_HOST</span> <span class="operator">=</span> <span class="string">&quot;http://oj.antares.cool&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> String accessKey;</span><br><span class="line"><span class="keyword">private</span> String secretKey;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> ExecuteCodeResponse <span class="title function_">executeCode</span><span class="params">(ExecuteCodeRequest executeCodeRequest)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">requestBodyJson</span> <span class="operator">=</span> JSONUtil.toJsonStr(executeCodeRequest);</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">HttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> HttpRequest.post(GATEWAY_HOST + <span class="string">&quot;/api/sandbox/execute&quot;</span>)</span><br><span class="line">            .header(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/json&quot;</span>)</span><br><span class="line">            .header(<span class="string">&quot;accessKey&quot;</span>, accessKey)</span><br><span class="line">            .header(<span class="string">&quot;sign&quot;</span>, genSign(requestBodyJson, secretKey))</span><br><span class="line">            .body(requestBodyJson)</span><br><span class="line">            .execute()) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">responseBody</span> <span class="operator">=</span> response.body();</span><br><span class="line">        log.info(<span class="string">&quot;响应：&#123;&#125;&quot;</span>, response);</span><br><span class="line">        <span class="keyword">return</span> JSONUtil.toBean(responseBody, ExecuteCodeResponse.class);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        log.info(<span class="string">&quot;请求沙箱失败：&quot;</span>, e);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，除了普通的请求体，请求头中还多了两个参数accessKey和sign，其中后者是根据请求体根据secretKey加密生成的，这就保证了整个请求的过程中secretKey不会泄露（因为它根本就不参与传输）。</p><p>当一个执行代码的请求到达代码沙箱时，代码沙箱服务会拿出请求头中的accessKey和sign，去数据库中查询accessKey对应的secretKey，之后验证加密的结果是否和sign一致。如果一致，证明这个请求是合法的，否则是非法的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/execute&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ExecuteCodeResponse <span class="title function_">execute</span><span class="params">(<span class="meta">@RequestBody</span> ExecuteCodeRequest executeCodeRequest, HttpServletRequest request)</span>&#123;</span><br><span class="line">    <span class="comment">//首先进行校验</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">accessKey</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;accessKey&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">sign</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;sign&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">secretKey</span> <span class="operator">=</span> userFeignService.getSecretKey(accessKey);</span><br><span class="line">    <span class="type">String</span> <span class="variable">body</span> <span class="operator">=</span> JSONUtil.toJsonStr(executeCodeRequest);</span><br><span class="line">    <span class="comment">//使用同样的算法生成签名</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">verify</span> <span class="operator">=</span> genSign(body, secretKey);</span><br><span class="line">    <span class="keyword">if</span>(verify.equals(sign))&#123;</span><br><span class="line">        log.info(<span class="string">&quot;校验通过&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> sandboxService.execute(executeCodeRequest);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ExecuteCodeResponse.builder()</span><br><span class="line">                .code(ExecuteCodeStatusEnum.NO_AUTH.getValue())</span><br><span class="line">                .msg(ExecuteCodeStatusEnum.NO_AUTH.getMsg())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该实现还有很大的优化空间：首先，API签名的校验可以提到网关层来实现；其次，我这里获取secretKey的方法是远程调用，即使在网关层限制这个接口只能被内部调用，secretKey在整个过程依然以明文的形式传输了，应该直接查询数据库比较好。</p><hr><h3 id="本地代码沙箱"><a href="#本地代码沙箱" class="headerlink" title="本地代码沙箱"></a>本地代码沙箱</h3><h4 id="字典树校验违禁词"><a href="#字典树校验违禁词" class="headerlink" title="字典树校验违禁词"></a>字典树校验违禁词</h4><p>代码有违禁词，例如Files，exec等，防止用户写入木马文件并执行。使用字典树可以<strong>减少存储空间，而且提高检索效率</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">字典树（Trie树，也称为前缀树）是一种树形数据结构，用于有效地存储和检索一组字符串，通常是字符串集合或关键字集合。字典树的主要特点是将共享相同前缀的字符串存储在同一层次结构中，从而实现了高效的字符串查找和前缀匹配。</span><br><span class="line"></span><br><span class="line">字典树的关键特点包括：</span><br><span class="line">①根节点： 字典树通常有一个根节点，表示空字符串或空前缀。</span><br><span class="line">②节点结构： 每个节点包含多个子节点，每个子节点代表一个字符。通常，字典树中的每个节点都有固定数量的子节点，通常是字符集的大小（例如，26个字母）。</span><br><span class="line">③路径： 从根节点到任何一个节点，沿着路径的字符连接在一起，构成一个字符串。这个路径上的字符序列即表示存储在字典树中的字符串。</span><br><span class="line">④叶节点： 叶节点是表示一个完整字符串的节点，不再有子节点。当我们从根节点到叶节点沿着路径移动时，就可以得到存储在字典树中的一个字符串。</span><br><span class="line">⑤前缀匹配： 字典树非常适合前缀匹配操作。要查找以某个字符串为前缀的所有字符串，只需从根节点开始，沿着路径移动到表示该前缀的节点，然后遍历该节点的所有子节点，即可获取所有匹配的字符串。</span><br><span class="line">⑥高效性能： 字典树在存储和检索字符串集合方面具有高效性能，特别适合于自动完成、单词搜索、拼写检查等应用。</span><br><span class="line"></span><br><span class="line">尽管字典树在存储和前缀匹配方面非常高效，但它也有一些缺点。其中主要的问题是空间开销，因为字典树需要存储大量的节点，特别是对于大型字符串集合。为了解决这个问题，可以使用压缩的字典树变体，如压缩字典树（Compressed Trie）或基数树（Radix Tree），以减少存储空间的开销。</span><br><span class="line"></span><br><span class="line">总之，字典树是一种用于高效存储和检索字符串集合的数据结构，特别适用于需要进行前缀匹配的应用。它在搜索引擎、自动完成、拼写检查和路由表等领域都有广泛的应用</span><br></pre></td></tr></table></figure><p>一个字典树的实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TrieNode</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> TrieNode[] children;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> isEndOfWord;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TrieNode</span><span class="params">()</span> &#123;</span><br><span class="line">        children = <span class="keyword">new</span> <span class="title class_">TrieNode</span>[<span class="number">26</span>]; <span class="comment">// 假设只包含小写字母</span></span><br><span class="line">        isEndOfWord = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(String word)</span> &#123;</span><br><span class="line">        <span class="type">TrieNode</span> <span class="variable">current</span> <span class="operator">=</span> <span class="built_in">this</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : word.toCharArray()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> c - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span> (current.children[index] == <span class="literal">null</span>) &#123;</span><br><span class="line">                current.children[index] = <span class="keyword">new</span> <span class="title class_">TrieNode</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            current = current.children[index];</span><br><span class="line">        &#125;</span><br><span class="line">        current.isEndOfWord = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">search</span><span class="params">(String word)</span> &#123;</span><br><span class="line">        <span class="type">TrieNode</span> <span class="variable">node</span> <span class="operator">=</span> searchPrefix(word);</span><br><span class="line">        <span class="keyword">return</span> node != <span class="literal">null</span> &amp;&amp; node.isEndOfWord;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">startsWith</span><span class="params">(String prefix)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> searchPrefix(prefix) != <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TrieNode <span class="title function_">searchPrefix</span><span class="params">(String prefix)</span> &#123;</span><br><span class="line">        <span class="type">TrieNode</span> <span class="variable">current</span> <span class="operator">=</span> <span class="built_in">this</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : prefix.toCharArray()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> c - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span> (current.children[index] == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>; <span class="comment">// 找不到前缀</span></span><br><span class="line">            &#125;</span><br><span class="line">            current = current.children[index];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> current;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Trie</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> TrieNode root;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Trie</span><span class="params">()</span> &#123;</span><br><span class="line">        root = <span class="keyword">new</span> <span class="title class_">TrieNode</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(String word)</span> &#123;</span><br><span class="line">        root.insert(word);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">search</span><span class="params">(String word)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> root.search(word);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">startsWith</span><span class="params">(String prefix)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> root.startsWith(prefix);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Trie</span> <span class="variable">trie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Trie</span>();</span><br><span class="line">        trie.insert(<span class="string">&quot;apple&quot;</span>);</span><br><span class="line">        System.out.println(trie.search(<span class="string">&quot;apple&quot;</span>));   <span class="comment">// 输出 true</span></span><br><span class="line">        System.out.println(trie.search(<span class="string">&quot;app&quot;</span>));     <span class="comment">// 输出 false</span></span><br><span class="line">        System.out.println(trie.startsWith(<span class="string">&quot;app&quot;</span>)); <span class="comment">// 输出 true</span></span><br><span class="line">        trie.insert(<span class="string">&quot;app&quot;</span>);</span><br><span class="line">        System.out.println(trie.search(<span class="string">&quot;app&quot;</span>));     <span class="comment">// 输出 true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="SecurityManager"><a href="#SecurityManager" class="headerlink" title="SecurityManager"></a>SecurityManager</h4><p><code>SecurityManager</code> 是 Java 中的一个安全管理器类，用于实施安全策略，限制程序的各种操作，以确保Java程序在受限的环境中运行。它是Java平台中的一项安全特性，用于控制应用程序的权限和行为，以保护系统免受恶意代码或不当行为的影响。<code>SecurityManager</code> 主要用于Java应用程序的安全性和沙箱隔离。</p><p>以下是一些<code>SecurityManager</code>的常见应用场景和用途：</p><ol><li><strong>限制文件访问：</strong> <code>SecurityManager</code>可以限制Java应用程序对文件系统的访问，以确保只有授权的文件可以被读取或写入。</li><li><strong>网络权限控制：</strong> 它可以控制Java应用程序的网络操作，例如限制应用程序的网络连接，确保不会进行不安全的网络操作。</li><li><strong>限制系统属性访问：</strong> <code>SecurityManager</code>可以防止Java应用程序访问敏感的系统属性，以保护系统信息的安全性。</li><li><strong>自定义权限检查：</strong> 开发人员可以自定义<code>SecurityManager</code>的权限检查逻辑，根据应用程序的需要进行扩展。</li><li><strong>沙箱隔离：</strong> 通过使用<code>SecurityManager</code>，可以将Java应用程序限制在受控的沙箱环境中，以减少潜在的安全风险。</li></ol><p>下面是一个简单的示例，演示如何在Java应用程序中使用<code>SecurityManager</code>来限制文件访问权限：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">javaCopy codeimport java.io.File;</span><br><span class="line">import java.security.Permission;</span><br><span class="line"></span><br><span class="line">public class FileSecurityManager extends SecurityManager &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void checkRead(String file) &#123;</span><br><span class="line">        if (file.endsWith(&quot;.txt&quot;)) &#123;</span><br><span class="line">            throw new SecurityException(&quot;Access to .txt files is not allowed.&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        // 安装自定义的SecurityManager</span><br><span class="line">        System.setSecurityManager(new FileSecurityManager());</span><br><span class="line"></span><br><span class="line">        // 尝试访问文件</span><br><span class="line">        try &#123;</span><br><span class="line">            File file = new File(&quot;sample.txt&quot;);</span><br><span class="line">            System.out.println(&quot;File can be read: &quot; + file.canRead());</span><br><span class="line">        &#125; catch (SecurityException e) &#123;</span><br><span class="line">            System.out.println(&quot;Security Exception: &quot; + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述示例中，自定义的<code>FileSecurityManager</code>扩展了<code>SecurityManager</code>，并覆盖了<code>checkRead(String file)</code>方法，以检查对文件的读取操作。如果文件名以<code>.txt</code>结尾，将抛出<code>SecurityException</code>，从而禁止对<code>.txt</code>文件的访问。</p><p>在<code>main</code>方法中，我们安装了自定义的<code>FileSecurityManager</code>作为安全管理器，然后尝试访问一个文件。如果文件名以<code>.txt</code>结尾，将抛出<code>SecurityException</code>，否则可以正常访问。这个示例演示了如何使用<code>SecurityManager</code>来限制文件访问权限，以确保只有授权的文件可以被访问。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MySecurityManager</span> <span class="keyword">extends</span> <span class="title class_">SecurityManager</span> &#123;</span><br><span class="line">    <span class="comment">// 检测程序是否可执行文件</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkExec</span><span class="params">(String cmd)</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SecurityException</span>(<span class="string">&quot;checkExec 权限异常：&quot;</span> + cmd);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检测程序是否允许写文件</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkWrite</span><span class="params">(String file)</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SecurityException</span>(<span class="string">&quot;checkWrite 权限异常：&quot;</span> + file);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检测程序是否允许删除文件</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkDelete</span><span class="params">(String file)</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SecurityException</span>(<span class="string">&quot;checkDelete 权限异常：&quot;</span> + file);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检测程序是否允许连接网络</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkConnect</span><span class="params">(String host, <span class="type">int</span> port)</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SecurityException</span>(<span class="string">&quot;checkConnect 权限异常：&quot;</span> + host + <span class="string">&quot;:&quot;</span> + port);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>项目中简单粗暴地关闭了本地代码沙箱的执行、写、删除文件的权限以及连接网络的权限</p><hr><h4 id="Runtime"><a href="#Runtime" class="headerlink" title="Runtime"></a>Runtime</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Runtime 类是 Java 中的一个系统类，用于与运行时环境进行交互和管理。它的主要作用是提供了一种在 Java 程序中执行系统级操作的方式，例如：</span><br><span class="line">执行外部进程： 使用 Runtime 类，您可以在 Java 程序中启动和执行外部系统进程。这对于调用其他可执行程序或系统命令非常有用。</span><br><span class="line">获取系统信息： Runtime 类允许您获取关于运行时环境的信息，如可用处理器数量、可用内存、操作系统信息等。</span><br><span class="line">垃圾回收操作： 您可以使用 Runtime 类的 gc() 方法强制运行垃圾回收器来尝试释放不再使用的内存。</span><br><span class="line">关闭虚拟机： Runtime 类的 exit() 方法允许您终止 Java 虚拟机的运行。这可以用于正常退出程序或在出现严重错误时终止程序。</span><br><span class="line"></span><br><span class="line">请注意，从 Java 9 开始，一些 Runtime 的方法已经被标记为废弃，而且在某些情况下，更推荐使用 ProcessBuilder 类来执行外部进程。</span><br><span class="line"></span><br><span class="line">总之，Runtime 类提供了一些与运行时环境交互的基本功能，使您能够执行一些系统级操作，但在使用时需要谨慎，以免造成不必要的系统干扰。</span><br></pre></td></tr></table></figure><p>Runtime如何执行外部进程</p><p><code>Runtime</code> 类可以用于执行外部进程。它提供了一个名为 <code>exec(String command)</code> 的方法，该方法用于执行指定的命令或可执行文件。下面是一个简单的示例，展示如何使用 <code>Runtime</code> 执行外部进程：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">javaCopy codepublic class ExecuteExternalProcess &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            // 使用Runtime.getRuntime()获取Runtime对象</span><br><span class="line">            Runtime runtime = Runtime.getRuntime();</span><br><span class="line">            </span><br><span class="line">            // 要执行的外部命令或可执行文件</span><br><span class="line">            String command = &quot;ls -l&quot;; // 在Unix/Linux系统上列出当前目录的文件列表</span><br><span class="line">            </span><br><span class="line">            // 使用exec()方法执行外部进程</span><br><span class="line">            Process process = runtime.exec(command);</span><br><span class="line">            </span><br><span class="line">            // 处理进程的输出流</span><br><span class="line">            InputStream inputStream = process.getInputStream();</span><br><span class="line">            BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));</span><br><span class="line">            String line;</span><br><span class="line">            </span><br><span class="line">            // 读取并输出进程的输出</span><br><span class="line">            while ((line = reader.readLine()) != null) &#123;</span><br><span class="line">                System.out.println(line);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            // 等待进程执行完成</span><br><span class="line">            int exitCode = process.waitFor();</span><br><span class="line">            System.out.println(&quot;进程执行完毕，退出代码：&quot; + exitCode);</span><br><span class="line">        &#125; catch (IOException | InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述示例中，我们使用 <code>Runtime.getRuntime().exec(command)</code> 执行了一个外部命令，并获取了该进程的输出流，以便读取其输出。然后，我们使用 <code>process.waitFor()</code> 等待进程执行完成，并获取其退出代码。</p><p>请注意，这只是一个基本示例，实际应用中可能需要更多的错误处理和参数设置，具体取决于要执行的外部进程和您的需求。</p><hr><h3 id="Docker代码沙箱"><a href="#Docker代码沙箱" class="headerlink" title="Docker代码沙箱"></a>Docker代码沙箱</h3><p>使用Docker实现的代码沙箱和通过Java的<code>Runtime</code>实现的代码沙箱各有其优缺点，具体取决于您的需求和用例：</p><p><strong>Docker 实现的代码沙箱：</strong></p><p>优点：</p><ol><li><strong>强大的隔离性：</strong> Docker容器提供了强大的隔离性，可以将用户代码隔离到独立的容器中，防止其访问主机系统资源。</li><li><strong>资源限制：</strong> Docker允许您精确地限制容器的资源使用，包括CPU、内存和磁盘空间。</li><li><strong>容易部署和管理：</strong> Docker容器可以轻松部署和管理，可以快速启动和停止，也支持自动化部署和扩展。</li><li><strong>安全性：</strong> 使用容器化技术，容易实现安全配置，可以控制容器的访问权限和网络连接，增强了安全性。</li></ol><p>缺点：</p><ol><li><strong>资源开销：</strong> Docker容器相对较重，需要一定的系统资源和存储空间。</li><li><strong>启动时间：</strong> 相比于<code>Runtime</code>方式，启动一个Docker容器需要更多时间。</li><li><strong>复杂性：</strong> Docker容器的设置和管理相对较复杂，需要一定的学习曲线。</li></ol><p><strong>通过Java的 <code>Runtime</code> 实现的代码沙箱：</strong></p><p>优点：</p><ol><li><strong>轻量级：</strong> 与Docker容器相比，使用<code>Runtime</code>执行外部进程的方式更加轻量级，不需要额外的容器化资源。</li><li><strong>启动快速：</strong> 启动外部进程通常比启动Docker容器更快。</li><li><strong>简单：</strong> 相对于Docker，使用<code>Runtime</code>的方式相对简单，无需熟悉Docker的配置和管理。</li></ol><p>缺点：</p><ol><li><strong>有限的隔离性：</strong> 使用<code>Runtime</code>方式执行外部进程时，无法获得与Docker容器相同的隔离性和安全性。用户代码可能能够访问主机系统资源。</li><li><strong>资源限制：</strong> 限制资源（如CPU、内存）的精确度较低，较难实现。</li><li><strong>安全性风险：</strong> 由于较低的隔离性，可能存在安全性风险，尤其是当运行不受信任的代码时。</li></ol><hr><h3 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h3><p>l由于原生和Docker代码沙箱的实现流程完全一致（保存为文件、编译、执行、获取输出、清理），使用模板方法模式定义了一套标准的流程并允许子类自行拓展，大幅减少冗余代码</p><hr><h3 id="Spring-Boot-Starter"><a href="#Spring-Boot-Starter" class="headerlink" title="Spring Boot Starter"></a>Spring Boot Starter</h3><p>什么是Spring Boot Starter</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Spring Boot Starter 是 Spring Boot 框架中的一个核心概念，用于简化和加速应用程序的开发和配置。</span><br><span class="line"></span><br><span class="line">具体来说，Spring Boot Starter 是一种用于自动化配置 Spring Boot 应用程序的组件。它通常是一个 Maven 或 Gradle 依赖，其中包含了一组默认的配置、依赖和代码，以便您可以更轻松地集成各种功能和扩展。</span><br><span class="line"></span><br><span class="line">Spring Boot Starter 的主要目标有以下几点：</span><br><span class="line">简化配置： Starter 提供了默认配置，使得您无需手动配置复杂的框架和库，减少了样板代码的编写。</span><br><span class="line">提供依赖管理： Starter 自动引入了应用程序所需的依赖项，确保它们的版本兼容性，这有助于避免版本冲突。</span><br><span class="line">快速集成功能： Starter 允许您通过简单地引入相关依赖，快速集成常见功能，如数据库连接、安全性、消息队列、Web开发等。</span><br><span class="line">模块化和可重用： Starter 可以按功能模块进行划分，允许您按需引入，提高了代码的可重用性和模块化。</span><br><span class="line"></span><br><span class="line">例如，如果您想要创建一个使用 Spring Boot 的Web应用程序，可以使用 spring-boot-starter-web Starter，它包含了与Web开发相关的默认配置和依赖项。如果您需要访问数据库，可以添加 spring-boot-starter-data-jpa Starter，它将引入JPA（Java Persistence API）相关的依赖项和配置。</span><br><span class="line"></span><br><span class="line">总之，Spring Boot Starter 是一种使 Spring Boot 应用程序更易于开发和配置的机制，通过它，您可以更快速地集成各种功能和扩展，减少了繁琐的配置工作，加速了应用程序的开发过程。</span><br></pre></td></tr></table></figure><p>要开发自己的Spring Boot Starter，您可以按照以下流程进行：</p><ol><li><p><strong>项目设置：</strong> 创建一个新的Maven或Gradle项目作为您的Starter项目。确保项目使用Spring Boot的依赖管理，并在项目的构建文件中引入Spring Boot的父项目。</p></li><li><p><strong>项目结构：</strong> 组织项目结构，通常按照以下方式创建：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">cssCopy codemy-starter/</span><br><span class="line">├── src/</span><br><span class="line">│   ├── main/</span><br><span class="line">│   │   ├── java/</span><br><span class="line">│   │   │   └── com/</span><br><span class="line">│   │   │       └── example/</span><br><span class="line">│   │   │           └── mystarter/</span><br><span class="line">│   │   │               └── MyStarterAutoConfiguration.java</span><br><span class="line">│   │   └── resources/</span><br><span class="line">│   │       └── META-INF/</span><br><span class="line">│   │           └── spring.factories</span><br><span class="line">│   └── test/</span><br><span class="line">│       └── ...</span><br><span class="line">├── pom.xml</span><br><span class="line">└── ...</span><br></pre></td></tr></table></figure><ul><li><code>MyStarterAutoConfiguration.java</code>：这是自动配置类，用于配置您的Starter所提供的功能。</li><li><code>spring.factories</code>：在<code>META-INF</code>目录下创建，用于告诉Spring Boot框架您的自动配置类的位置。</li></ul></li><li><p><strong>编写自动配置类：</strong> 在<code>MyStarterAutoConfiguration.java</code>中编写自动配置类，通过Java配置方式定义您的Starter提供的功能和Bean。确保在类上使用<code>@Configuration</code>注解，以标识这是一个配置类。</p></li><li><p><strong>编写Starter代码：</strong> 开发Starter所提供的功能代码，包括服务、组件、配置等。</p></li><li><p><strong>编写Starter属性：</strong> 如果您的Starter需要配置属性，可以创建一个<code>application.properties</code>或<code>application.yml</code>文件，定义属性的默认值，或者创建一个专门的属性类。</p></li><li><p><strong>测试：</strong> 创建适当的单元测试和集成测试，确保您的Starter工作如预期。</p></li><li><p><strong>打包：</strong> 使用Maven或Gradle将您的Starter项目打包为JAR文件。</p></li><li><p><strong>发布：</strong> 如果希望其他开发人员可以使用您的Starter，可以将其发布到Maven中央仓库或私有仓库，以便其他项目可以依赖它。</p></li><li><p><strong>文档：</strong> 编写文档，清晰地说明如何使用您的Starter，包括配置选项和示例代码。</p></li><li><p><strong>示例项目：</strong> 创建一个示例项目，演示如何在Spring Boot应用程序中使用您的Starter。</p></li><li><p><strong>使用：</strong> 您可以将您的Starter添加到其他Spring Boot项目的依赖中，并在应用程序配置文件中配置任何自定义属性。</p></li></ol><p>总之，开发一个自己的Spring Boot Starter需要编写自动配置类、提供功能代码、定义属性、测试、文档和发布等一系列步骤。一旦开发完成，其他开发人员可以轻松地使用您的Starter来扩展他们的Spring Boot应用程序。</p>]]></content:encoded>
      
      
      <category domain="https://wl2o2o.github.io/categories/Project/">Project</category>
      
      
      <category domain="https://wl2o2o.github.io/tags/Spring-Boot/">Spring Boot</category>
      
      <category domain="https://wl2o2o.github.io/tags/MySQL/">MySQL</category>
      
      
      <comments>https://wl2o2o.github.io/posts/edbedd1.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>VueSkills</title>
      <link>https://wl2o2o.github.io/posts/b9206201.html</link>
      <guid>https://wl2o2o.github.io/posts/b9206201.html</guid>
      <pubDate>Wed, 08 May 2024 02:21:52 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;export-default-问题&quot;&gt;&lt;a href=&quot;#export-default-问题&quot; class=&quot;headerlink&quot; title=&quot;export default 问题&quot;&gt;&lt;/a&gt;export default 问题&lt;/h2&gt;&lt;p&gt;当使用setup语法</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="export-default-问题"><a href="#export-default-问题" class="headerlink" title="export default 问题"></a>export default 问题</h2><p>当使用setup语法糖时，不需要使用export default 导出组件，否则会报错，如下图所示：<br><img src="https://cdn.jsdelivr.net/gh/wl2o2o/blogCdn/img/VueSkills-2024-05-08-10-28-55.png" alt="Vue中setup语法糖"></p><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><blockquote><p>在 Vue 3 中使用 <code>&lt;script setup&gt;</code> 语法糖时，通常不需要显式地使用 export default 来导出组件选项，因为 <code>&lt;script setup&gt;</code> 会自动收集顶级声明（如变量、函数等）并暴露给模板。但是，如果你在 <code>&lt;script setup&gt;</code> 中还包含了一个传统的 export default 块，这通常会导致编译错误，因为这与 <code>&lt;script setup&gt;</code> 的设计初衷相冲突。</p></blockquote><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="居中问题"><a href="#居中问题" class="headerlink" title="居中问题"></a>居中问题</h2><p>调整居中，只会通过<code>left: -500px;</code>这样来调整距离，但是这样并不完美，当改变窗口尺寸的时候，会出现问题</p><h3 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h3><p>要想优雅地居中显示，可以利用 CSS 的 Flexbox 或 Grid 布局特性，而不是直接设置 left 的负值。考虑到你可能是在某个容器内希望居中这个按钮，这里提供两种方法来实现这一目标，假设这个按钮位于一个打算用于布局的父容器中。<br>方法 1: 使用 Flexbox<br>修改父容器的样式，使其成为 Flex 容器，并居中其内容。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 父容器应用 Flexbox 布局 --&gt;</span><br><span class="line">&lt;div style=&quot;display: flex; justify-content: center;&quot;&gt;</span><br><span class="line">  &lt;a-button</span><br><span class="line">    type=&quot;primary&quot;</span><br><span class="line">    :loading=&quot;loading1&quot;</span><br><span class="line">    @click=&quot;handleClick1&quot;</span><br><span class="line">    &gt;toSubmit&lt;/a-button</span><br><span class="line">  &gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>方法 2: 使用 Grid 布局<br>如果更倾向于使用 Grid 布局，也可以通过以下方式实现居中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 父容器应用 Grid 布局 --&gt;</span><br><span class="line">&lt;div style=&quot;display: grid; place-items: center;&quot;&gt;</span><br><span class="line">  &lt;a-button</span><br><span class="line">    type=&quot;primary&quot;</span><br><span class="line">    :loading=&quot;loading1&quot;</span><br><span class="line">    @click=&quot;handleClick1&quot;</span><br><span class="line">    &gt;toSubmit&lt;/a-button</span><br><span class="line">  &gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>在这两个方法中，我们都没有直接在按钮上设置位置属性，而是通过调整其父元素的布局模式来实现居中对齐。这样可以确保按钮在不同屏幕尺寸和分辨率下都能保持良好的居中效果，同时也让代码更加简洁和响应式。</p><h3 id="方法介绍"><a href="#方法介绍" class="headerlink" title="方法介绍"></a>方法介绍</h3><p>这两种布局是现代 CSS 中非常重要的布局模型，它们提供了更强大和灵活的页面元素定位方式，特别是对于响应式设计和复杂的界面布局。<br>Flexbox (Flexible Box)<br>用途：Flexbox 是一种一维布局模型，主要用于处理容器内元素的线性布局，如行或列。它擅长处理单轴布局，比如水平或垂直排列的元素，以及元素之间的对齐和填充。</p><p>主要属性：</p><ul><li>display: flex：启用 Flexbox 布局。</li><li>flex-direction：控制主轴的方向（行或列）。</li><li>justify-content：控制元素在主轴上的对齐方式。</li><li>align-items：控制元素在交叉轴上的对齐方式。</li><li>flex-wrap：决定元素是否换行。</li><li>flex-grow, flex-shrink, flex-basis：控制元素的伸缩比例和基础大小。</li></ul><p>优点：易于实现单行或单列的弹性布局，如导航栏、页脚、列表项等。<br>兼容性：在现代浏览器中广泛支持，包括 IE10+。</p><p>CSS Grid (Grid Layout)<br>用途：Grid 是一个二维布局模型，它允许你创建复杂的网格系统，非常适合页面的全面布局，如网页的行和列。它可以同时处理行和列，因此非常适合构建响应式网格。</p><p>主要属性：</p><ul><li>display: grid：启用 Grid 布局。</li><li>grid-template-columns 和 grid-template-rows：定义网格的列和行。</li><li>grid-gap：设置网格项之间的间距。</li><li>grid-template-areas：用于命名和指定网格区域。</li><li>grid-auto-flow：控制网格项如何自动填充网格。</li><li>align-items, justify-items，以及 align-self, justify-self：控制网格项在各自单元格内的对齐。</li></ul><p>优点：能够精确控制元素的位置和大小，适用于复杂的多列布局和响应式设计。</p><p>兼容性：在现代浏览器中支持良好，包括 IE10+（但需要使用 -ms- 前缀）。</p><p>通常，开发者会根据具体的需求和场景来选择使用 Flexbox 还是 Grid。对于简单的布局和对齐，Flexbox 可能更合适；而对于复杂的二维布局和整体页面结构，Grid 则更为强大。在某些情况下，两者可以结合使用，以充分利用各自的优点。</p><h2 id="换行显示-水平排列"><a href="#换行显示-水平排列" class="headerlink" title="换行显示 || 水平排列"></a>换行显示 || 水平排列</h2><h3 id="方法介绍-1"><a href="#方法介绍-1" class="headerlink" title="方法介绍"></a>方法介绍</h3><blockquote><p>在Vue中，特别是使用诸如Ant Design Vue这类UI框架时，<code>&lt;a-divider&gt;</code> 是一个组件，用于在界面上创建分割线，以视觉上分隔内容区块。这个组件模拟了HTML中的<code>&lt;hr&gt;</code>标签的功能，但更加灵活和可定制。其中，size&#x3D;”0” 是一个属性设置，用于定义分割线的大小或者说粗细。在Ant Design Vue中，size 属性可以接受不同的预设值，比如 ‘small’, ‘middle’, ‘large’ 或者直接指定像素值。当设置为 “0” 时，这通常意味着希望得到一个极细或者几乎不可见的分割线。不过，实际表现可能会依据框架的具体实现和CSS样式有所不同，某些情况下，设置为 “0” 可能意在移除分割线的可见部分，仅保留其布局上的分隔作用或依赖于自定义样式来控制其外观。</p></blockquote><h2 id="router-push-问题"><a href="#router-push-问题" class="headerlink" title="router.push 问题"></a>router.push 问题</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>这个问题是在我的毕业设计中想要通过点击切换上一题、下一题中遇到的，当使用router.push()方法时，我们目前所在的url与将要跳转的url包含相同的前缀时，路由会跳转，但是页面不会重新渲染，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const toPrevious = () =&gt; &#123;</span><br><span class="line">  // currentPath: &quot;/view/question/1&quot;</span><br><span class="line">  router</span><br><span class="line">    .push(&#123;</span><br><span class="line">      path: `/view/question/$&#123;currentQuestionId.value&#125;`,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">const toPrevious = () =&gt; &#123;</span><br><span class="line">  router</span><br><span class="line">    .push(&#123;</span><br><span class="line">      path: `$&#123;currentQuestionId.value&#125;`,</span><br><span class="line">      // path: `/user/login`,</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(() =&gt; &#123;</span><br><span class="line">      window.history.go(0);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://wl2o2o.github.io/categories/%E5%89%8D%E7%AB%AF/">前端</category>
      
      
      <category domain="https://wl2o2o.github.io/tags/Vue3/">Vue3</category>
      
      
      <comments>https://wl2o2o.github.io/posts/b9206201.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>快慢指针-环形链表的起点计算</title>
      <link>https://wl2o2o.github.io/posts/19bb2c2.html</link>
      <guid>https://wl2o2o.github.io/posts/19bb2c2.html</guid>
      <pubDate>Thu, 18 Apr 2024 21:08:01 GMT</pubDate>
      
      <description>力扣142.环形链表：刷吧！怪不得叫算法，你不算还真不行</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="142-环形链表"><a href="#142-环形链表" class="headerlink" title="142. 环形链表"></a>142. 环形链表</h1><h2 id="这里是普通哈希表解法"><a href="#这里是普通哈希表解法" class="headerlink" title="这里是普通哈希表解法"></a>这里是普通哈希表解法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">detectCycle</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="comment">// 解法一：</span></span><br><span class="line">        <span class="comment">// base case</span></span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 使用hashmap</span></span><br><span class="line">        HashSet&lt;ListNode&gt; map = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">pos</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (head != <span class="literal">null</span>) &#123;</span><br><span class="line">            map.add(head);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (map.contains(head.next) &amp;&amp; map.contains(head.next.next)) &#123;</span><br><span class="line">                <span class="keyword">return</span> head.next;</span><br><span class="line">            &#125;</span><br><span class="line">            head = head.next;</span><br><span class="line">            pos++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="这里是快慢指针解法"><a href="#这里是快慢指针解法" class="headerlink" title="这里是快慢指针解法"></a>这里是快慢指针解法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">detectCycle</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="comment">// 解法二：快慢指针</span></span><br><span class="line">        <span class="comment">// base case</span></span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">null</span> || head.next == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">slow</span> <span class="operator">=</span> head, fast = head;</span><br><span class="line">        <span class="keyword">while</span> (fast != <span class="literal">null</span> &amp;&amp; fast.next != <span class="literal">null</span>) &#123;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            <span class="keyword">if</span> (fast == slow) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 开始计算环的起点</span></span><br><span class="line">        slow = head;</span><br><span class="line">        <span class="keyword">while</span> (slow != fast) &#123;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解法二的精髓在于，快慢指针的快指针每次移动两步，慢指针每次移动一步，当快慢指针相遇时，<strong>慢指针回到起点</strong>，快、慢指针每次都移动一步，当快慢指针再次相遇时，相遇点就是环的起点。</p><p>为什么呢？直接上图证明：<br><img src="https://cdn.jsdelivr.net/gh/wl2o2o/blogCdn/img/142-%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8-2024-04-19-05-15-30.png" alt="142-环形链表-2024-04-19-05-15-30"></p>]]></content:encoded>
      
      
      <category domain="https://wl2o2o.github.io/categories/Algo/">Algo</category>
      
      
      <category domain="https://wl2o2o.github.io/tags/%E9%93%BE%E8%A1%A8/">链表</category>
      
      <category domain="https://wl2o2o.github.io/tags/%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88/">快慢指针</category>
      
      
      <comments>https://wl2o2o.github.io/posts/19bb2c2.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>递归魔法-反转链表</title>
      <link>https://wl2o2o.github.io/posts/15023dde.html</link>
      <guid>https://wl2o2o.github.io/posts/15023dde.html</guid>
      <pubDate>Thu, 18 Apr 2024 18:58:16 GMT</pubDate>
      
      <description>闲来无事，刷一道力扣206.反转链表，递归算法的优雅程度简直了！</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="206-反转链表"><a href="#206-反转链表" class="headerlink" title="206. 反转链表"></a>206. 反转链表</h1><h2 id="这里是普通头插法解法"><a href="#这里是普通头插法解法" class="headerlink" title="这里是普通头插法解法"></a>这里是普通头插法解法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">prev</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">next</span> <span class="operator">=</span> cur.next;</span><br><span class="line">            cur.next = prev;</span><br><span class="line">            prev = cur;</span><br><span class="line">            cur = next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="这里是递归解法"><a href="#这里是递归解法" class="headerlink" title="这里是递归解法"></a>这里是递归解法</h2><p>对于递归算法，最重要的是明确递归函数的定义和递归调用的逻辑。不要在我们的小脑瓜里模拟递归压栈，真的压不起（反正我是没有那个能力哈哈哈哈）</p><p>老老实实弄明白一层递归的作用，如图：<br><img src="https://cdn.jsdelivr.net/gh/wl2o2o/blogCdn/img/206-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8-2024-04-19-03-09-25.png" alt="206-反转链表-2024-04-19-03-09-25"></p><p>然后，写终止条件，就完事了。如图：<br><img src="https://cdn.jsdelivr.net/gh/wl2o2o/blogCdn/img/206-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8-2024-04-19-03-11-07.png" alt="206-反转链表-2024-04-19-03-11-07"></p><p>优雅的递归，实在是很优雅！</p><p>最后别忘了链表的末尾要指向null。</p><p>需要注意的有：</p><ol><li>递归算法要有 base case</li><li>防止出现环<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="comment">// ListNode prev = null;</span></span><br><span class="line">        <span class="comment">// ListNode cur = head;</span></span><br><span class="line">        <span class="comment">// while(cur != null) &#123;</span></span><br><span class="line">        <span class="comment">//     ListNode next = cur.next;</span></span><br><span class="line">        <span class="comment">//     cur.next = prev;</span></span><br><span class="line">        <span class="comment">//     prev = cur;</span></span><br><span class="line">        <span class="comment">//     cur = next;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="comment">// return prev;</span></span><br><span class="line">        <span class="comment">// base case</span></span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">null</span> || head.next == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">last</span> <span class="operator">=</span> reverseList(head.next);</span><br><span class="line">        head.next.next = head;</span><br><span class="line">        head.next = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">return</span> last;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content:encoded>
      
      
      <category domain="https://wl2o2o.github.io/categories/Algo/">Algo</category>
      
      
      <category domain="https://wl2o2o.github.io/tags/%E9%93%BE%E8%A1%A8/">链表</category>
      
      <category domain="https://wl2o2o.github.io/tags/%E9%80%92%E5%BD%92/">递归</category>
      
      
      <comments>https://wl2o2o.github.io/posts/15023dde.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>美团第一场笔试热经</title>
      <link>https://wl2o2o.github.io/posts/53972c13.html</link>
      <guid>https://wl2o2o.github.io/posts/53972c13.html</guid>
      <pubDate>Sat, 09 Mar 2024 05:56:51 GMT</pubDate>
      
      <description>毁灭吧！只AC了90%</description>
      
      
      
      <content:encoded><![CDATA[<blockquote><h2 id="Voiceover："><a href="#Voiceover：" class="headerlink" title="Voiceover："></a>Voiceover：</h2><p><em><strong>见者有缘，缘来好运。欢迎大家来到我的博客【CS_GUIDER】：（建议收藏至浏览器书签）<br><a href="https://wlei224.gitee.io/">https://wlei224.gitee.io</a> （建议访问这个，速度极快）<br><a href="https://wl2o2o.github.io/">https://wl2o2o.github.io</a> （建议收藏至浏览器书签）</strong></em></p><p>我的开源博客涵盖了<strong>八股文</strong>、<strong>Java基础</strong>、<strong>JVM</strong>、<strong>MySQL</strong>、<strong>Linux</strong>、<strong>框架技术</strong>、<strong>算法</strong>以及其他领域的文章，博客域名长期有效！！！如果本站对您来说有用，请收藏本文链接奥。万分感谢。请放心，开源博客，没有任何套路。</p><p>个人博客建站教程长期不定时连载，囊括我基于 Hexo | fluid 主题的搭建版本记录以及搭建踩坑记录，还有基于原 fluid 主题增加的小功能，如果感兴趣，欢迎大家在页脚评论区咨询。</p><p><img src="https://cs-wlei224.obs.cn-south-1.myhuaweicloud.com/blog-imgs/202311210931702.png" alt="博客文章"></p></blockquote><p>如图所示：<br><img src="https://cs-wlei224.obs.cn-south-1.myhuaweicloud.com/blog-imgs/202403091401792.png" alt="笔试中的某一题"></p><p>我的题解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> leetcode;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意类名必须为 Main, 不要有任何 package xxx 信息</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">long</span> <span class="variable">cnt</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">long</span> <span class="variable">cnt0</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 注意 hasNext 和 hasNextLine 的区别</span></span><br><span class="line">        <span class="keyword">while</span> (in.hasNextInt()) &#123; <span class="comment">// 注意 while 处理多个 case</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">            <span class="type">int</span> <span class="variable">q</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                list.add(in.nextInt());</span><br><span class="line">                cnt += list.get(i);</span><br><span class="line">                <span class="keyword">if</span> (list.get(i) == <span class="number">0</span>) cnt0++;</span><br><span class="line">                <span class="comment">// System.out.print(list.get(i));</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; q; i++) &#123;</span><br><span class="line">                <span class="type">long</span> <span class="variable">l</span> <span class="operator">=</span> in.nextLong();</span><br><span class="line">                <span class="type">long</span> <span class="variable">r</span> <span class="operator">=</span> in.nextLong();</span><br><span class="line">                System.out.println((cnt + l*cnt0) + <span class="string">&quot; &quot;</span> + (cnt + r*cnt0));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>春招的第一个笔试，属实有点紧张了，没有想起来用前缀和数组，而是使用了最简单的且浪费效率遍历查询，最终虽然AC了90% ，但是还是超时了，造成没有全AC的原因之一可能还与没有处理[L,R]边界有关！</p><p>下面是来自AI的建议：</p><blockquote><p>造成这段代码超时的原因在于：<br>重复计算：在处理每个查询时，代码都会遍历整个数组来重新计算总和cnt和0的个数cnt0。对于多个查询，这种做法会&gt; 导致大量的重复计算。<br>无效操作：对每个查询范围内的元素并未进行任何针对性的计算，而是直接使用全局累计的cnt和cnt0进行求解。这种方&gt; 式无法正确处理区间内包含0的情况，因为在计算结果时未剔除区间内的0的影响。<br>为了优化这个问题，应当在读取输入数组之后，预先计算出所有非零元素的累加和（可以采用前缀和的方法），同时记录&gt; 每个位置之前连续非零元素的累加和。这样，在处理查询时，可以直接根据前缀和计算出给定区间的非零元素之和，从而&gt; 避免重复计算并提高效率。</p></blockquote>]]></content:encoded>
      
      
      <category domain="https://wl2o2o.github.io/categories/Algo/">Algo</category>
      
      
      <category domain="https://wl2o2o.github.io/tags/%E9%9D%A2%E8%AF%95%E9%80%86%E8%A2%AD/">面试逆袭</category>
      
      <category domain="https://wl2o2o.github.io/tags/%E7%BE%8E%E5%9B%A2%E7%AC%94%E8%AF%95/">美团笔试</category>
      
      
      <comments>https://wl2o2o.github.io/posts/53972c13.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>再也不怕面试问到 HashMap</title>
      <link>https://wl2o2o.github.io/posts/4a30f0e6.html</link>
      <guid>https://wl2o2o.github.io/posts/4a30f0e6.html</guid>
      <pubDate>Mon, 01 Jan 2024 15:31:00 GMT</pubDate>
      
      <description>怎么理解 HashMap 的数据结构？怎么解决 hash 冲突？哈希表负载因子是多少？哈希表怎么扩容？</description>
      
      
      
      <content:encoded><![CDATA[<hr><p><img src="https://cs-wlei224.obs.cn-south-1.myhuaweicloud.com/blog-imgs/202401012339709.png" alt="2024一起卷吧"></p><font face="STCAIYUN"><b> 见者有缘，缘来好运🍀诚邀各位围观我的博客【CS_GUIDER】👇</b></font><br><font color=#758ef1><b>🧑‍💻个人主页：<a href="https://github.com/wl2o2o">wl2o2o</a><br>✒️博客主页：<a href="https://wlei224.gitee.io"> CS_GUIDER(好玩)</a><a href="https://wl2o2o.github.io"> CS_GUIDER(实用)</a><br>⭐八股专栏：<a href="https://csguider.icu"> JavaU8G(内置MusicPlayer)</a></b></font><br><font color=#fc1944><b>我的开源博客涵盖了八股文、设计模式、网站搭建、数据库、Linux系统的教程和笔记。我致力于为您提供Java编程的实用指南和资源，包括Java框架、JVM、微服务以及Git。无论您是初学者还是经验丰富的开发人员，都可以从中获益。谢谢您的光临！</b></font><hr><h1 id="官方介绍"><a href="#官方介绍" class="headerlink" title="官方介绍"></a>官方介绍</h1><p><img src="https://cs-wlei224.obs.cn-south-1.myhuaweicloud.com/blog-imgs/202401012338127.png" alt="什么是 HashMap"></p><h1 id="我的理解"><a href="#我的理解" class="headerlink" title="我的理解"></a>我的理解</h1><p><code>HashMap</code>又称哈希表，又称散列表。首先，<code>HashMap</code>的数据结构是基于数组和链表的，如图：</p><p><img src="https://cs-wlei224.obs.cn-south-1.myhuaweicloud.com/blog-imgs/202401012338628.png" alt="HashMap数据结构"></p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p>so，既然是基于数组和链表的，那就说明数组和链表的特点也就是<code>HashMap</code>的特点：</p><ul><li><p><strong>数组：寻址快，直接根据索引访问元素，插入和删除慢；</strong></p></li><li><p><strong>链表：寻址慢，需要从头节点开始遍历，插入和删除快。</strong></p></li></ul><p>说到<code>HashMap</code>就要说到 Java 8 了，Java 8 之前，<code>HashMap</code>使用一个数组加链表的结构来存储 【K，V】 键值对。</p><p>如果发生 hash 冲突，那么，</p><p>这必将导致在处理 hash 冲突的时候性能不高，尤其是链表很长的时候。因此，Java 8 中的<code>HashMap</code>引入了红黑树来替代链表，这样当链表变长的时候，会自动转换为红黑树，从而提高了增删改查的性能。</p><h2 id="什么是-Hash-冲突？怎么解决？"><a href="#什么是-Hash-冲突？怎么解决？" class="headerlink" title="什么是 Hash 冲突？怎么解决？"></a>什么是 Hash 冲突？怎么解决？</h2><p>哈希冲突就是不同的数据经过哈希计算之后，得到的<br><code>hash</code>值相同，然后被映射到了哈希表中的同一个位置，这就是哈希冲突。</p><p><strong>解决方法：</strong></p><ol><li>开放寻址法<br>意思就是，一旦发生冲突的话，就去按线性顺序寻找下一个空的散列地址，知道找到存放位置；</li><li>链地址法<br>就是将哈希表数组的元素作为链表的头结点（这个链表的所有元素构成一个近义词链表，因为经过<code>hash</code>计算值相同），一旦哈希冲突，就把该关键字链接到该结点的尾部；</li><li>再哈希法<br>顾名思义，就是再次通过另一个<code>hash</code>函数计算，得到另外的散列地址，直到冲突不发生；</li><li>建立公共溢出区<br>将哈希表分为<code>基本表</code>与<code>溢出表</code>，发生冲突的元素放入溢出表中。</li></ol><h2 id="负载因子为什么是-0-75-？"><a href="#负载因子为什么是-0-75-？" class="headerlink" title="负载因子为什么是 0.75 ？"></a>负载因子为什么是 0.75 ？</h2><p>对于开放寻址法，荷载因子是特别重要因素，应严格限制在0.7-0.8以下。超过0.8，查表时的CPU缓存不命中（cache missing）按照指数曲线上升。因此，一些采用开放寻址法的hash库，如Java的系统库限制了荷载因子为0.75，超过此值将resize散列表。</p><h2 id="如何进行扩容？"><a href="#如何进行扩容？" class="headerlink" title="如何进行扩容？"></a>如何进行扩容？</h2><p>待完善···</p>]]></content:encoded>
      
      
      <category domain="https://wl2o2o.github.io/categories/Blog/">Blog</category>
      
      
      <category domain="https://wl2o2o.github.io/tags/%E5%85%AB%E8%82%A1%E6%96%87/">八股文</category>
      
      <category domain="https://wl2o2o.github.io/tags/%E9%9D%A2%E8%AF%95%E9%80%86%E8%A2%AD/">面试逆袭</category>
      
      <category domain="https://wl2o2o.github.io/tags/Java%E5%9F%BA%E7%A1%80/">Java基础</category>
      
      
      <comments>https://wl2o2o.github.io/posts/4a30f0e6.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>什么是微服务与分布式</title>
      <link>https://wl2o2o.github.io/posts/7c385d50.html</link>
      <guid>https://wl2o2o.github.io/posts/7c385d50.html</guid>
      <pubDate>Mon, 01 Jan 2024 15:23:22 GMT</pubDate>
      
      <description>微服务是什么、分布式与微服务的区别（用一句话说明白，连载中···）</description>
      
      
      
      <content:encoded><![CDATA[<hr><p><img src="https://cs-wlei224.obs.cn-south-1.myhuaweicloud.com/blog-imgs/202401012339968.png" alt="2024一起卷吧"></p><font face="STCAIYUN"><b> 见者有缘，缘来好运🍀诚邀各位围观我的博客【CS_GUIDER】👇</b></font><br><font color=#758ef1><b>🧑‍💻个人主页：<a href="https://github.com/wl2o2o">wl2o2o</a><br>✒️博客主页：<a href="https://wlei224.gitee.io"> CS_GUIDER(好玩)</a><a href="https://wl2o2o.github.io"> CS_GUIDER(实用)</a><br>⭐八股专栏：<a href="https://csguider.icu"> JavaU8G(内置MusicPlayer)</a></b></font><br><font color=#fc1944><b>我的开源博客涵盖了八股文、设计模式、网站搭建、数据库、Linux系统的教程和笔记。我致力于为您提供Java编程的实用指南和资源，包括Java框架、JVM、微服务以及Git。无论您是初学者还是经验丰富的开发人员，都可以从中获益。谢谢您的光临！</b></font><hr><h1 id="🐳什么是微服务"><a href="#🐳什么是微服务" class="headerlink" title="🐳什么是微服务"></a>🐳什么是微服务</h1><blockquote><p>维基百科这样介绍：</p></blockquote><p><img src="https://cs-wlei224.obs.cn-south-1.myhuaweicloud.com/blog-imgs/202401012339582.png" alt="image.png"></p><h1 id="🐳微服务的本质"><a href="#🐳微服务的本质" class="headerlink" title="🐳微服务的本质"></a>🐳微服务的本质</h1><p>把一个大项目，根据业务逻辑拆分为一个个小模块，模块之间通过 HTTP 或者其他网络通讯协议进行相互调用，这样的项目叫做微服务项目。</p><h1 id="特点以及使用场景"><a href="#特点以及使用场景" class="headerlink" title="特点以及使用场景"></a>特点以及使用场景</h1><blockquote><p>微服务框架的特性：</p></blockquote><ul><li>每个服务都容易被取代。</li><li>服务是以能力来组织的，例如用户界面、前端、推荐系统、账单或是物流等。</li><li>由于功能被拆成多个服务，因此可以由不同的编程语言、数据库实现。</li><li>架构是对称而非分层（即生产者与消费者的关系）。</li></ul><blockquote><p>使用场景：</p></blockquote><ul><li>适用于具持续交付（Continuous Delivery）的软件开发流程。</li><li>与服务导向架构（Service-Oriented Architecture）不同，后者是集成各种业务的应用程序，但微服务只属于一个应用程序。</li></ul><h1 id="知识扩展"><a href="#知识扩展" class="headerlink" title="知识扩展"></a>知识扩展</h1><blockquote><p>微服务可以使用什么技术实现？</p></blockquote><ul><li><code>Spring Cloud</code></li><li><code>Spring Cloud Alibaba</code></li><li><code>Dubbo</code></li><li><code>RPC</code>（<code>GRPC</code>、<code>TRPC</code>）</li></ul><blockquote><p>为什么微服务架构受欢迎？</p></blockquote><ul><li><strong>降低系统耦合性</strong>：通过将功能分解到各个离散的服务中，微服务架构降低了系统的耦合性，使得各个服务能够独立地进行开发、部署和扩展。</li><li><strong>提高灵活性</strong>：由于每个服务都是独立的，可以对不同的服务使用不同的技术栈和编程语言，提高了技术的灵活性和效率。</li><li><strong>便于维护和调试</strong>：每个服务都是独立的，当出现问题时，可以迅速定位并修复问题，不会对整个应用程序造成影响，提高了系统的可维护性和稳定性。</li><li><strong>易于水平扩展</strong>：每个服务都可以独立地进行水平扩展，提高了系统的可扩展性。当某个服务的负载增加时，可以单独对该服务进行扩展，而不会影响其他服务。</li><li><strong>促进业务创新</strong>：微服务架构是更面向业务创新的一种架构模式，使得开发团队可以更快地响应业务需求的变化，提高开发效率和应用程序的迭代速度。</li></ul><blockquote><p> 从语雀这次 P0 级事故，我们可以学到什么？</p><ul><li>可监控</li><li>可灰度</li><li>可回滚</li></ul></blockquote><p><img src="https://img-blog.csdnimg.cn/img_convert/8dd32ad90fb8bb94993d3730de078bc3.png" alt="image.png"></p><blockquote><p>知识扩展</p></blockquote><h2 id="💻分布式与🐳微服务的区别"><a href="#💻分布式与🐳微服务的区别" class="headerlink" title="💻分布式与🐳微服务的区别"></a>💻分布式与🐳微服务的区别</h2><p><strong>简单来说：</strong></p><ul><li>分布式就是把一个大的项目拆分，部署到多台机器；<br>微服务是把项目按照功能进行拆分。</li><li>分布式项目对标<strong>单机项目</strong>；<br>微服务项目是与<strong>整个项目的业务逻辑</strong>进行对比的。</li></ul><h2 id="面试问题"><a href="#面试问题" class="headerlink" title="面试问题"></a>面试问题</h2><p>什么是分布式锁？什么是单机锁？<br>分布式锁？顾名思义，分布式锁就是要考虑到多台机器的场景</p><p>待补充······</p>]]></content:encoded>
      
      
      <category domain="https://wl2o2o.github.io/categories/Blog/">Blog</category>
      
      
      <category domain="https://wl2o2o.github.io/tags/%E5%85%AB%E8%82%A1%E6%96%87/">八股文</category>
      
      <category domain="https://wl2o2o.github.io/tags/%E9%9D%A2%E8%AF%95%E9%80%86%E8%A2%AD/">面试逆袭</category>
      
      <category domain="https://wl2o2o.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/">微服务</category>
      
      
      <comments>https://wl2o2o.github.io/posts/7c385d50.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>面经干货</title>
      <link>https://wl2o2o.github.io/posts/399d9fcb.html</link>
      <guid>https://wl2o2o.github.io/posts/399d9fcb.html</guid>
      <pubDate>Wed, 27 Dec 2023 14:08:59 GMT</pubDate>
      
      <description>我收藏的一篇介绍校招和面试常问问题总结好文</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="校招与面经"><a href="#校招与面经" class="headerlink" title="校招与面经"></a>校招与面经</h1><blockquote><p>声明：本文转载自编程导航公众号，发布于此便于个人学习，侵权删！</p></blockquote><h2 id="写在开头"><a href="#写在开头" class="headerlink" title="写在开头"></a>写在开头</h2><p>以下内容是我最近的面试的结果，其中涉猎广泛小中大公司都有~</p><p>整个秋招下来也是一个成长的经历，明白了很多各方面关于找 java 工作的信息，下面我会分别从求职信息（信息差）以及面经角度去写，希望也能够打破大家的信息差！</p><h2 id="校招流程"><a href="#校招流程" class="headerlink" title="校招流程"></a>校招流程</h2><ul><li>网申（投简历）</li><li>测评（看你性格啥的，部分无）</li><li>笔试（部分实习及小公司无)</li><li>确认信息（hr面，聊天，部分无）</li><li>面试（业务岗位面试1-2轮+主管&#x2F;人事面，沟通什么时候到岗）</li><li>给 offer</li><li>签订三方（给你正式员工的 offer）</li></ul><blockquote><p>有些公司整个流程下来贼慢。甚至1-2月，所以做好准备！</p></blockquote><h2 id="关于校园招聘"><a href="#关于校园招聘" class="headerlink" title="关于校园招聘"></a>关于校园招聘</h2><p>校招：指校园招聘（学生身份）一般集中在春秋季节，又称春&#x2F;秋招。</p><p>秋招：秋季校园招聘。</p><p>春招：春季校园招聘。</p><p>offer：录取通知书（注意口头offer有风险）秋招offer一般指的是毕业直接去上班就行了。</p><p>签三方：与校园、公司，签订三方。（这个时候才稳！）</p><h2 id="关于上述校园招聘信息差"><a href="#关于上述校园招聘信息差" class="headerlink" title="关于上述校园招聘信息差"></a>关于上述校园招聘信息差</h2><p><strong>1、有很多人其实并不了解，校园招聘的重要性。</strong>首先如果你的目标是大厂（要明白大厂不缺人）的话，那么春秋招是大厂招聘学生的唯一途径。（所以不要错过！）</p><p><strong>2、校招的周期很长，做好长期拉锯战的准备。</strong>有时候一家公司的整个招聘流程会长达 1-2 月，所以千万不要认为 2、3 天没给通知就认为自己挂掉了。（注意做好与自身心里对抗的过程，以及脱产的一种压力….比如你在家的话，家庭的压力….你懂的！）</p><p><strong>3、大学生第一份工作很重要。</strong>对你后续跳槽起到决定性作用，所以签三方要注意！举个例子：就算你去的不是耳熟能详的大厂。去一些亚信、用友、金蝶、泛微，个人感觉都要好过于一些不知名的公司。（当然，除非薪资你各方面很满意。）</p><p><strong>4、没拿到毕业证，工作都属于实习。</strong></p><p><strong>5、最好的打算是做到暑假实习。</strong>即秋招，就是暑期实习；然后通过一个实习转正去留用。而不是秋招一把梭哈。</p><p><strong>6、只有大公司才会校招</strong>（这里指的是给开 offer ），小公司不会给开 offer 的。而是通过让你实习，等到你拿到毕业证，然后进行转正。</p><h2 id="关于找工作"><a href="#关于找工作" class="headerlink" title="关于找工作"></a><strong>关于找工作</strong></h2><p><strong>1、大学生第一份工作慎重慎重慎重！！！</strong>实习无所谓，正式留用的话尽量去大平台，记住一句话：0-20 人这种公司，一律 pass。</p><p><strong>2、找工作途径要 open。</strong>boss、智联、官网网申都要进行，甚至积攒人脉，让别人内推你。</p><p><strong>3、内推说有用也有用，没用也没用。</strong>有的内推起码可以帮你省掉烦人的测评，甚至于笔试。</p><p><strong>4、部分实习是要求你达到一个期限的。</strong>比如要求你实习3个月，4个月，5个月这样！</p><p><strong>5、没面试，没offer，是正常的，心态要放平！</strong></p><p><strong>6、能部门只招就部门直招（实习），不要都在官网投。</strong>比如滴滴、货拉拉（我遇到的）是有部门直招的，当时我直接在 boss 上就面试了，跳过了笔试等环节。</p><h2 id="面试环节"><a href="#面试环节" class="headerlink" title="面试环节"></a>面试环节</h2><h3 id="聊天"><a href="#聊天" class="headerlink" title="聊天"></a><strong>聊天</strong></h3><p><strong>1、为什么投&#x2F;选择我们公司？了解过我们公司嘛？</strong></p><p>在一面信息确认环节遇到的，比如讯和和泛微，当时就瞎说呗….</p><p><strong>2、介绍一下你自己</strong></p><p>这里给大家一个思路，信息介绍+项目+个人技术栈。</p><p>举例：面试官你好！我叫 xx，是一名 xx 大学大四的本科生。因为大四了嘛，所以想要找一份实习工作，在校期间呢，参加过 xx 比赛，拿过 xx 奖。因为我是科班嘛，所以计算机基础相关的学习跟着学校课程来的：比如计算机网络、操作系统，在企业中开发的技术栈，如 SpringBoot，是通过自学的一个途径。</p><p>提示：这不重要，有啥说啥也行，我有时候嫌麻烦，就随便说两句，表达流程、不紧张即可。</p><p><strong>3、我看你有一段实习经历为什么辞职？怎么不考虑留用？</strong></p><p>这个有好几次面试官问到我，感觉也是因为我是一个实习生身份嘛，怕我跑路…</p><p><strong>4、你高考成绩多少分？怎么没参加四六级，你不觉得有四六级是一种优势嘛？</strong></p><p>（讯和你个对日外包问的什么破问题……）</p><p><strong>5、介绍一下你的实习，之前实习做了什么？</strong></p><p>当时泛微群面问到的，一起的一共五个人，然后大概有三个人有实习经历。</p><p>所以，可能….有实习经历会加分。</p><h3 id="java基础"><a href="#java基础" class="headerlink" title="java基础"></a><strong>java基础</strong></h3><p><strong>1、java基本数据类型？</strong></p><p>八种嘛，最简单的八股了。有手就行，估计面试官也是先从简单的开始，意思一下！</p><p><strong>2、封装的数据类型？</strong></p><p>就回答了一下，常用的有String、Integer。</p><p><strong>3、&amp;&amp; 和 &amp; 区别？</strong></p><p>当时第二个没想起来，只回答了第一个是逻辑与运算，然后巴拉巴拉…</p><p><strong>4、String（）类，的方法？</strong></p><p>这问题差点给我弄懵…当时就想起来 valueOf() 然后说了一个 charAt()，(当时我脑子里还在想 length()是不是….）后面又心虚的说不是…然后面试官说别紧张…..</p><p>然后面试官就问我比如分割字符串怎么弄，我说 split（）</p><p><strong>5、String()，StringBuffer()，StringBuilder()区别？</strong></p><p>常问八股之一，巴拉巴拉…</p><p><strong>6、HashMap，HashSet 的区别？</strong></p><p>集合常问八股，巴拉巴拉…</p><p><strong>7、ArrayList，LinkedList 的区别？</strong></p><p>集合常问八股，巴拉巴拉…</p><p><strong>8、HashMap 为什么用红黑树？</strong></p><p>归根结底还是问 HashMap。</p><p><strong>9、&#x3D;&#x3D; 和 equals 的区别？</strong></p><p>基础常问八股，巴拉巴拉。</p><h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a><strong>MySQL</strong></h3><p><strong>1、面试官给我几个字段，让我查询班级平均成绩，写 sql？</strong></p><p>当时我没想起来AVG（score），我就说有一个关键字。然后，我把这个放在 where 后面了，然后面试官就说这能放在 where 后面嘛？说实话，不上机让我口述还有点紧张，哈哈哈….</p><p><strong>2、事务隔离级别知道嘛？ACID 原理。</strong></p><p><strong>3、数据库调优有经验嘛？怎么优化</strong>？</p><p>其实这里有个坑就是，我当时简历写的是熟悉mysql和redis优化…..后来被滴滴面死后我就把简历改了。</p><p><strong>4、索引的数据结构？</strong></p><p><strong>5、select，id，where，name，is，null，id，是主键，问走不走索引？</strong></p><p><strong>6、SQL，语句优化场景，能举例子嘛？从排查到优化。</strong></p><p>以上问题反正翻来覆去就是索引呗，所以你懂得！MySQL，索引是必问的。</p><p>然后中小的话，可能会问一些简单的，考察一下你基础，比如让写，sql，啥的。</p><p>当时我面滴滴，面试官是默认增删改查你都会的！</p><h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a><strong>Redis</strong></h3><p><strong>1、数据类型？</strong></p><p>说实话，亚信挺有意思的，面了两次，一次面试官问你 Java 数据类型，一次面试官问你 redis 数据类型。hhh~</p><p><strong>2、你用redis，都是干啥？redis应用场景？</strong></p><p>当时先问的应用场景我就从八股的角度说了一下，然后面试官突然来一句你用过 redis 嘛？，给我弄懵了，我说用过用过…然后追问我用来干啥了，当时大脑卡壳了就说了个分布式 ID，最主要的缓存我都没说。hh~</p><p><strong>3、了解 scan 嘛？redis 集群怎么搭建？redis 的优化了解过嘛？怎么一键删除大 key？</strong></p><p>滴滴上难度了，当时确实也是第一次没啥经验嘛，有点打击到我！虽然后来发现都是一些常见的八股…</p><h3 id="并发"><a href="#并发" class="headerlink" title="并发"></a><strong>并发</strong></h3><p><strong>1、sync 底层原理。</strong></p><p><strong>2、一个什么注解，问我用过嘛？</strong></p><p>我说没有，然后面试官说:算了，不重要…..</p><p>不重要那你问我……</p><p><strong>3、线程池参数，给我出了道题，问我现在是执行什么操作。</strong></p><h3 id="框架"><a href="#框架" class="headerlink" title="框架"></a><strong>框架</strong></h3><p><strong>1、Mybatis，#，和，$，区别？</strong></p><p>这也是常见八股了，我直播还看到过，不过我当时看直播也走神了….，就说了#预处理，$没用过。</p><p><strong>2、SpringBoot，常用注解？</strong></p><p>面亚信两次，两次面试官都问这个，挺好玩的。</p><p>直接从天南说到天北…….</p><p>个人认为，判断一个人Spring，熟练度，这一个问题足矣。</p><p><strong>3、说一下IOC？</strong></p><p>常见八股。</p><p><strong>4、自动装配原理？</strong></p><p>常见八股了，不过我遇到的那个面试官，老是喜欢通过场景去问你：比如你项目中写了 API 项目，那么就会问你 sdk 怎么做的？sdk 怎么做的，那不就是自动装配原理嘛？所以又绕回来了….</p><p><strong>5、a 方法开启事务注解，b 没用，问你 main 调用 a，a 调用 b，事务还生效嘛？</strong></p><p><strong>6、spring 配置信息写在哪里？你用 yml，还是那个啥，我说我用 yml。</strong></p><p>这问题我觉得挺简单。的而且没搞懂面试官想问的点，不写在 yml 还能写到哪里去….</p><h3 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h3><h4 id="API调用平台"><a href="#API调用平台" class="headerlink" title="API调用平台"></a><strong>API调用平台</strong></h4><p><strong>1、API 调用平台，sdk 怎么简化了开发？用户怎么去调用？你这个 sdk 做了什么功能？sdk 怎么开发的?</strong></p><p>sdk 简化了开发，因为用户直接引用 jar 包就能用了，用的时候，直接在 yml 写好配置就行了，sdk 我回答的是加密，sdk 开发回答的是，先这样再那样，顺便提了下自动装配。</p><p><strong>2、问我为什么不用@Value，获取值，用 yml？</strong></p><p>这我没搞懂，我就说用啥不都行嘛？</p><p><strong>3、gateWay，怎么做到的鉴权？</strong></p><p>给我问住了….当时那个简历是，老简历了，而且上来问我第二个项目…..</p><p>第一个项目我是 BI 项目，第二个是 API 项目，看来面试官这是对 API 项目更感兴趣啊！</p><p>然后我就简单的回答了下，我说再 gateway，拦截器里，拦截到，然后又对业务封装了下，然后我说具体的因为项目之前做的，有点忘了。（说之前 gateWay 是通过阅读官方文档自学的嘛，后来就不用了，一些语句语法啥的就忘了，然后说了下过滤请求怎么做到的….）</p><p>然后我和面试官就笑了。。。。</p><h4 id="BI项目"><a href="#BI项目" class="headerlink" title="BI项目"></a><strong>BI项目</strong></h4><p><strong>1、BI 项目，这是干啥的？</strong></p><p>两个亚信的面试官都问到了，哎怪不得上来先问我第二个 API 项目。</p><p>感情 BI 这么冷门啊，然后就介绍了什么叫 AIGC，回答了下这个项目是干啥的。</p><p><strong>2、基于 IO 线程池、自定义线程池怎么做的？线程池作用？</strong></p><p>输出线程池的知识，先从 IO，CPU，这两种讲起，然后，又说了核心参数这些，</p><p>然后回答这个项目为什么要用啊，怎么异步啊……</p><p><strong>3、问我 MQ 干啥了，怎么弄的异步啥的？</strong></p><p>回答起到了一个削峰嘛，然后我又说我用的是两种方案，线程池主要是本地的嘛，所以后续引入了 MQ，mq 好处就是他是一个分布式嘛，也便于后续扩展！</p><p>异步，巴拉巴拉……</p><p>最终面试官：噢~</p><p>看着面试官搞明白了我的项目业务流程，</p><p>我露出了满意的笑容！</p><p>不是因为项目太简单了哦~纯粹是我口才好，对就是这样b（￣▽￣）d</p><h3 id="反问"><a href="#反问" class="headerlink" title="反问"></a><strong>反问</strong></h3><p><strong>1、回答&#x2F;表现怎么样？</strong></p><p>如果面试官：还行吧，其实你们都差不多这个水平，寄了&#x2F;(ㄒoㄒ)&#x2F;~~</p><p>如果面试官：还不错。稳了！全都稳了(<em>^_^</em>)</p><p>问这个也方便做复盘总结！</p><p><strong>2、后续二面的话，需要多长时间？</strong></p><p>这个主要不瞎等嘛，毕竟….成年人的世界，不回复就是拒绝了！</p><p><strong>3、公司岗位是做什么的&#x2F;我进去之后干什么内容？</strong></p><p>可以知道是不是核心业务或者是不是外包之类。</p><p><strong>4、实习生加班嘛？加班有没有加班费？</strong></p><p>终面的时候当聊天的时候可以问一问，毕竟不能和钱过不去。</p><p><strong>5、后续可不可以转正？转正流程是什么？转正后薪资。</strong></p><p>工作不好找，能转就转，你懂的！</p><p><strong>6、实习工资多少？工作地点、工作环境？</strong></p><p>就当聊天随便问了！工作环境我觉得还是很重要的。</p><p>大长桌那种，我真的……受不了！！！</p><p><strong>以上：1、2，是必问的。</strong></p><p>后面的话，就当聊天时随便问问了，以上那几条算我提供的一些思路吧！</p><p>比如，我在反问的时候也问到了我表现怎么样，面试官也说了还不错。</p><p>可能这就是为什么后面我在问别的问题的时候，面试官也挺真诚的！</p>]]></content:encoded>
      
      
      <category domain="https://wl2o2o.github.io/categories/STAR/">STAR</category>
      
      
      <category domain="https://wl2o2o.github.io/tags/%E9%9D%A2%E8%AF%95%E9%80%86%E8%A2%AD/">面试逆袭</category>
      
      
      <comments>https://wl2o2o.github.io/posts/399d9fcb.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>我的 设计模式 随笔</title>
      <link>https://wl2o2o.github.io/posts/88811ab6.html</link>
      <guid>https://wl2o2o.github.io/posts/88811ab6.html</guid>
      <pubDate>Wed, 20 Dec 2023 03:32:21 GMT</pubDate>
      
      <description>一篇小而精的设计模式随笔，学习架构思想，为你的项目增添亮点</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="什么是设计模式？"><a href="#什么是设计模式？" class="headerlink" title="什么是设计模式？"></a>什么是设计模式？</h2><blockquote><p>顾名思义，无论是什么领域出现了模式相关的东西，那么这些模式一定是相对于<code>原生</code>来说，更加高效、更加优雅、可维护更强。</p></blockquote><blockquote><p>在<a href="https://zh.wikipedia.org/wiki/%E8%BB%9F%E9%AB%94%E5%B7%A5%E7%A8%8B">软件工程</a>中，<strong>设计模式</strong>（design pattern）是对<a href="https://zh.wikipedia.org/wiki/%E8%BB%9F%E4%BB%B6%E8%A8%AD%E8%A8%88">软件设计</a>中普遍存在（反复出现）的各种问题，所提出的解决方案。这个术语是由<a href="https://zh.wikipedia.org/wiki/%E5%9F%83%E9%87%8C%E5%B8%8C%C2%B7%E4%BC%BD%E7%91%AA">埃里希·伽玛</a>（Erich Gamma）等人在1990年代从<a href="https://zh.wikipedia.org/wiki/%E5%BB%BA%E7%AD%91%E8%AE%BE%E8%AE%A1">建筑设计</a>领域引入到<a href="https://zh.wikipedia.org/wiki/%E8%A8%88%E7%AE%97%E6%A9%9F%E7%A7%91%E5%AD%B8">计算机科学</a>的。</p><p>设计模式并不直接用来完成<a href="https://zh.wikipedia.org/wiki/%E7%A8%8B%E5%BC%8F%E7%A2%BC">代码</a>的编写，而是描述在各种不同情况下，要怎么解决问题的一种方案。<a href="https://zh.wikipedia.org/wiki/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1">面向对象</a>设计模式通常以<a href="https://zh.wikipedia.org/wiki/%E7%B1%BB_(%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6)">类别</a>或<a href="https://zh.wikipedia.org/wiki/%E7%89%A9%E4%BB%B6_(%E9%9B%BB%E8%85%A6%E7%A7%91%E5%AD%B8)">物件</a>来描述其中的关系和相互作用，但不涉及用来完成应用程序的特定类别或物件。设计模式能使不稳定依赖于相对稳定、具体依赖于相对抽象，避免会引起麻烦的紧耦合，以增强软件设计面对并适应变化的能力。</p><p>并非所有的软件模式都是设计模式，设计模式特指软件“设计”层次上的问题。还有其他非设计模式的模式，如<a href="https://zh.wikipedia.org/wiki/%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F">架构模式</a>。同时，<a href="https://zh.wikipedia.org/wiki/%E6%BC%94%E7%AE%97%E6%B3%95">算法</a>不能算是一种设计模式，因为算法主要是用来解决计算上的问题，而非设计上的问题。</p><p>随着软件开发社群对设计模式的兴趣日益增长，已经出版了一些相关的专著，定期召开相应的研讨会，而且<a href="https://zh.wikipedia.org/wiki/%E6%B2%83%E5%BE%B7%C2%B7%E5%9D%8E%E5%AE%81%E5%AE%89">沃德·坎宁安</a>（Ward Cunningham）为此发明了<a href="https://zh.wikipedia.org/wiki/WikiWiki">WikiWiki</a>用来交流设计模式的经验。</p><div style = "text-align: right">    <a>--摘自维基百科</a></div></blockquote><h2 id="Java中都有哪些设计模式？"><a href="#Java中都有哪些设计模式？" class="headerlink" title="Java中都有哪些设计模式？"></a><code>Java</code>中都有哪些设计模式？</h2><p>很多人都说一共有 23 种设计模式，但是我们根据设计模式的定义来看，我认为<code>MVC</code>也是一种设计模式，所以，在强调了只要是基于原生、前辈们经验总结下来的设计思想，都可以说是一种设计模式。</p><p><strong>常见的设计模式有：</strong></p><ol><li><p>工厂模式</p><blockquote><p>创建一个工厂，用于创建对象。<br>目的：将对象的创建与使用分离，可以避免在代码中重复写对象创建的代码。</p></blockquote></li><li><p>模板方法模式</p><blockquote><p>抽出公共方法，然后复用</p></blockquote></li><li><p>装饰器模式</p><blockquote><p>继承，然后添加新的功能就叫装饰器</p></blockquote></li><li><p>享元模式</p></li><li><p>适配器模式</p><blockquote><p>将一个类的接口换成客户端希望的立一个接口，可以是原不兼容的类被使用。</p></blockquote></li><li><p>单例模式</p><blockquote><p>确保类只有一个实例，并只提供一个全局访问点。</p></blockquote></li></ol><h2 id="设计模式的七大原则"><a href="#设计模式的七大原则" class="headerlink" title="设计模式的七大原则"></a>设计模式的七大原则</h2><p>SRP: Single Responsibility Principle（单一职责）—— 一个类只干一件事<br>OCP: Open Close Principle（开放关闭原则）—— 开放功能，关闭修改<br>LSP: 里氏替换原则 —— 任何一个父类都可以使用子类来替换，并且不影响程序正常执行<br>DIP: 依赖倒置原则 —— 高层模块要依赖于抽象接口<br>ISP: 接口隔离原则 —— 也就相当于接口单一职责，接口应该小而精，不包含多余的方法<br>CARP: 合成聚合复用原则 —— 少用继承，优先使用合成聚合来构建复杂对象<br>LoD: 迪米特法则 —— 松耦合</p><p><strong>总结：</strong></p><p>我认为设计模式就是前人针对于各种各样的总结下来的精华。是完全可以直接复用，并且能够提高开发效率的一种模式。</p>]]></content:encoded>
      
      
      <category domain="https://wl2o2o.github.io/categories/Java-U8G/">Java U8G</category>
      
      
      <category domain="https://wl2o2o.github.io/tags/%E5%85%AB%E8%82%A1%E6%96%87/">八股文</category>
      
      <category domain="https://wl2o2o.github.io/tags/%E9%9D%A2%E8%AF%95%E9%80%86%E8%A2%AD/">面试逆袭</category>
      
      
      <comments>https://wl2o2o.github.io/posts/88811ab6.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>我的 Java EE 随笔</title>
      <link>https://wl2o2o.github.io/posts/50aab414.html</link>
      <guid>https://wl2o2o.github.io/posts/50aab414.html</guid>
      <pubDate>Sat, 16 Dec 2023 01:13:57 GMT</pubDate>
      
      <description>小而精的Java基础八股文随笔，记录实战面试高频考点</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="Java概述"><a href="#Java概述" class="headerlink" title="Java概述"></a>Java概述</h2><blockquote><p>什么是 Java 语言？</p></blockquote><p>Java 语言是一门面向对象的编程语言，不仅吸收了 C++ 语言的各种优点，还舍弃了 C++ 中难以理解的多继承以及指针的概念，因此 Java 语言功能强大且简单易用。Java 语言很好的实现了面向对象的思想，因此支持我们以优雅的思维方式进行复杂的编程。</p><blockquote><p>Java 语言的特点？</p></blockquote><ol><li>面向对象</li><li>平台无关</li><li>编译与解释并行</li><li>支持多线程</li></ol><blockquote><p>JVM、JDK、JRE？</p></blockquote><p>JVM – Java 虚拟机<br>JRK – Java 开发工具包<br>JRE – Java 运行环境</p><p>三者之间的关系是：JDK &gt; JRE &gt; JVM</p><h2 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h2><ol><li>Java有几种数据类型？分别是哪些？</li><li>怎么理解<code>&amp;</code>和<code>&amp;&amp;</code></li><li>自增运算是怎么理解的？</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span>  <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">i = i++;</span><br><span class="line">System.out.println(i);</span><br></pre></td></tr></table></figure><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><ol><li>什么是面向对象？有哪些特性？</li><li>什么是多态？怎么理解多态？</li></ol><blockquote><p>什么是多态？</p></blockquote><p>多态就是，对于同一个父类，指向不同子类对象的同一个行为，运行出来结果不同。</p><blockquote><p>怎么理解多态？</p></blockquote><p>例如伪代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animals</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span> &#123;</span><br><span class="line">        sout(<span class="string">&quot;坐着睡！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animals</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span> &#123;</span><br><span class="line">        sout(<span class="string">&quot;站立着睡！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animals</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span> &#123;</span><br><span class="line">        sout(<span class="string">&quot;睁眼睡！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 同一个父类 Animals，指向不同子类 Dog、Cat</span></span><br><span class="line"><span class="type">Animals</span> <span class="variable">animals1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line"><span class="type">Animals</span> <span class="variable">animals2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br></pre></td></tr></table></figure><p>对于<code>animals1.sleep()</code>和<code>animals2.sleep()</code>，最后运行出来可能会有不用的结果，但是这取决于几个条件：</p><ul><li><p>继承类或实现接口</p></li><li><p>子类重写方法</p></li><li><p>同一个父类，指向不同子类</p></li></ul><blockquote><p>重载与重写什么区别？</p></blockquote><p>引用 Wiki 百科：</p><blockquote><h2 id="函数重载规则"><a href="#函数重载规则" class="headerlink" title="函数重载规则"></a>函数重载规则</h2><ul><li>多个函数定义使用相同的函数名称</li><li>函数参数的数量或类型必须有区别</li></ul><p>函数重载是静态多态的一种类别，其使用某种“最佳匹配”算法解析函数调用，通过找到形式参数类型与实际参数类型的最佳匹配来解析要调用的具体函数。该算法的细节因语言而异。</p><p>函数重载通常与<a href="https://zh.wikipedia.org/wiki/%E9%A1%9E%E5%9E%8B%E7%B3%BB%E7%B5%B1">静态类型</a>编程语言（在<a href="https://zh.wikipedia.org/wiki/%E5%AD%90%E7%A8%8B%E5%BA%8F">函数调用</a>中强制执行<a href="https://zh.wikipedia.org/wiki/%E9%A1%9E%E5%9E%8B%E7%B3%BB%E7%B5%B1#%E5%9E%8B%E5%88%A5%E6%AA%A2%E6%9F%A5">类型检查</a>）有关。重载函数实际上只是一组具有相同名称的不同函数。具体调用使用哪个函数是在<a href="https://zh.wikipedia.org/wiki/%E7%BC%96%E8%AF%91%E6%9C%9F"><strong>编译期</strong></a>决定的。</p><p>在 <a href="https://zh.wikipedia.org/wiki/Java">Java</a> 中，函数重载也被称为编译时多态和静态多态。</p><p>函数重载不应与在运行时进行选择的<a href="https://zh.wikipedia.org/wiki/%E5%A4%9A%E6%80%81_(%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6)">多态</a>形式混淆，例如通过<a href="https://zh.wikipedia.org/wiki/%E8%99%9A%E5%87%BD%E6%95%B0">虚函数</a>而不是静态函数。</p></blockquote><p>因此我们大概明白：</p><ul><li>重载是编译时重载的，编译时根据参数，决定调用哪个方法</li><li>重写是运行期重写的，运行时根据父类指向的子类，调用方法</li></ul><p><strong>总结：</strong></p><p>重载和重写都是多态的体现，维基百科中也有说明<a href="https://zh.wikipedia.org/wiki/%E5%A4%9A%E6%80%81_(%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6)">多态分为动态多态和静态多态</a></p><p>如图：</p><p><img src="https://cs-wlei224.obs.cn-south-1.myhuaweicloud.com/blog-imgs/202312141036730.png" alt="image-20231214103612773"></p><p>那么我们不妨理解为重载为静态动态（编译器决定）、重写为运行期决定的，为动态多态。</p><ol start="3"><li><p><code>==</code>与<code>equals</code>的区别？</p></li><li><p>重写过<code>equals</code>和<code>hashcode</code>吗？为什么要重写？</p></li><li><p>解释一下深拷贝和浅拷贝。</p></li></ol><blockquote><ol start="6"><li>Java创建对象的几种方式？</li></ol></blockquote><ol><li><p>new</p></li><li><p>反射</p></li><li><p>clone</p></li><li><p>序列化</p></li></ol><p><strong>怎么理解反射</strong>？</p><p>通过new来创建对象就是正射，是在编译时就会确定创建的对象类型；而反射就是动态地获取类信息、构造器进而<code>newInstance</code>创建对象的过程。</p><p><strong>怎么通过反射来创建一个对象</strong>？</p><p>无参实例化：</p><p><code>Object obj = Class.forName(类名).getConstructor().newInstance();</code></p><p>有参实例化：</p><p><code>Object obj = Class.forName(类名).getConstructor(String.class).newInstance(&quot;汪汪&quot;);</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            <span class="comment">// 获取Dog类的Class对象  </span></span><br><span class="line">            Class&lt;?&gt; dogClass = Class.forName(<span class="string">&quot;Dog&quot;</span>);  </span><br><span class="line">  </span><br><span class="line">            <span class="comment">// 获取Dog类的构造器  </span></span><br><span class="line">            Constructor&lt;?&gt; dogConstructor = dogClass.getConstructor();  </span><br><span class="line">  </span><br><span class="line">            <span class="comment">// 通过构造器创建Dog对象  </span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">dog</span> <span class="operator">=</span> dogConstructor.newInstance();  </span><br><span class="line">  </span><br><span class="line">            <span class="comment">// 如果需要初始化参数，可以使用带有参数的构造函数  </span></span><br><span class="line">            Constructor&lt;?&gt; dogConstructorWithParams = dogClass.getConstructor(String.class);  </span><br><span class="line">            <span class="type">Object</span> <span class="variable">dogWithName</span> <span class="operator">=</span> dogConstructorWithParams.newInstance(<span class="string">&quot;旺财&quot;</span>);  </span><br><span class="line">  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException | NoSuchMethodException | IllegalAccessException | InstantiationException | InvocationTargetException e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> String name;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">()</span> &#123;  </span><br><span class="line">        name = <span class="string">&quot;小黄学长&quot;</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">(String name)</span> &#123;  </span><br><span class="line">        <span class="built_in">this</span>.name = name;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123; </span><br><span class="line">        <span class="keyword">return</span> name;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><ol><li>说说<code>String</code>，是基本数据类型吗？</li></ol><blockquote><ol start="2"><li>String、StringBuffer、StringBuilder有什么区别？</li></ol></blockquote><p><strong>区别：</strong></p><ol><li><code>String</code>类是不可变的，<code>StringBuilder</code>和<code>StringBuffer</code>是可变的;</li><li><code>StringBuffer</code>是线程安全的</li></ol><p><strong>知识扩展：</strong></p><p><code>StringBuffer</code>为什么是线程安全的？</p><ol start="3"><li><p>了解<code>intern</code>方法吗？</p></li><li><p>String 是如何保持不可变的？（源码 Final 类）</p></li></ol><h2 id="Integer"><a href="#Integer" class="headerlink" title="Integer"></a>Integer</h2><ol><li>String怎么转Integer？原理？</li></ol><h2 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h2><ol><li>了解过<code>Object</code>类吗？都有什么方法？你怎么理解<code>finalize</code>方法？</li></ol><p><img src="https://cs-wlei224.obs.cn-south-1.myhuaweicloud.com/blog-imgs/202312070047276.png"></p><p>2. </p><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><ol><li>Java中的异常体系</li></ol><p><img src="https://cs-wlei224.obs.cn-south-1.myhuaweicloud.com/blog-imgs/202312070047393.png"></p><ol start="2"><li>怎么处理异常？<ol><li>捕获try{}catch{}finalize{}</li><li>抛出throw、throws</li></ol></li></ol><h2 id="I-O"><a href="#I-O" class="headerlink" title="I&#x2F;O"></a>I&#x2F;O</h2><table><thead><tr><th>BIO–Blocking IO</th><th>同步阻塞IO（一个连接一个线程，发起请求一直阻塞，一般通过连接池改善）</th><th><img src="https://cs-wlei224.obs.cn-south-1.myhuaweicloud.com/blog-imgs/202312070047025.png" alt="image.png"></th></tr></thead><tbody><tr><td>NIO–Non-blocking IO</td><td>同步非阻塞IO（多个连接复用一个线程，一个请求一个线程）</td><td><img src="https://cs-wlei224.obs.cn-south-1.myhuaweicloud.com/blog-imgs/202312070047309.png" alt="image.png"></td></tr><tr><td>AIO–Asynchronous IO</td><td>异步非阻塞IO（一个有效请求一个线程，IO请求立即返回，操作结束后，回调通知）</td><td><img src="https://cs-wlei224.obs.cn-south-1.myhuaweicloud.com/blog-imgs/202312070047677.png" alt="image.png"></td></tr></tbody></table><ol><li>IO流体系结构</li></ol><p><img src="https://cs-wlei224.obs.cn-south-1.myhuaweicloud.com/blog-imgs/202312070047942.jpeg"></p><ol start="2"><li>什么是装饰器模式？</li></ol><blockquote><p>我对装饰器的理解就是继承，然后增加新功能，但它们的核心区别在于装饰器模式是通过“添加”新的功能，而不是通过“重写”原有功能来实现扩展的。</p></blockquote><p>在IO流中，这种模式被广泛应用。例如，在java.io包中，InputStream和OutputStream是两个基础的输入输出流类，它们定义了输入输出流的基本行为和接口。然后，有许多其他的类和接口继承自InputStream和OutputStream，并添加了新的功能。这些新类可以看作是装饰器，它们可以增强原有类（被装饰类）的功能。例如，BufferedInputStream和BufferedOutputStream可以在原有类的基础上添加缓冲功能，提高IO性能。<br>总的来说，装饰器模式是一种灵活且强大的设计模式，它允许我们在运行时动态地添加或删除功能，而无需修改原始的类。这种设计模式提高了代码的复用性和可扩展性。<br><em><strong>手撸装饰器模式：</strong></em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Printer</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StandardPrinter</span> <span class="keyword">implements</span> <span class="title class_">Printer</span> &#123;</span><br><span class="line">    <span class="meta">@Overvide</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Standard print!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ColorPrinter</span> <span class="keyword">implements</span> <span class="title class_">Printer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Printer printer;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ColorPrinter</span><span class="params">(Printer printer)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.printer = printer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Overvide</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;Color print!&quot;</span>);</span><br><span class="line">        Printer.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Printer</span> <span class="variable">sPrinter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StandardPrinter</span>();</span><br><span class="line">        sPrinter = <span class="keyword">new</span> <span class="title class_">ColorPrinter</span>(sPrinter);</span><br><span class="line">        sPrinter.print();</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><ol><li>什么是序列化与反序列化</li><li>序列化有哪几种方式？<ol><li>Java对象流序列化</li></ol></li></ol><p>一般会用Java原生IO 进行转化，一般会用ObjectIO</p><pre><code>  2. JSON序列化</code></pre><p>JSON序列化的方式有很多，一般会选择使用<code>jackson</code>包中的<code>ObjectMapper</code>类来将Java对象转化为byte数组或将json串转化为对象</p><pre><code>  3. ProtoBuff序列化</code></pre><p>是一种轻便高效的结构化数据存储格式，通过其序列化对象可以很大程度的把对象进行压缩，大大减小数据传输大小，提高性能。</p><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><ol><li>什么是泛型？</li><li>什么是类型擦除？为什么要擦除？</li><li>为什么泛型不可以被重载？</li></ol><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><ol><li>什么是注解？注解的生命周期？</li><li>说说<code>@Override</code>和<code>@Autowired</code>的源码</li></ol><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><ol><li><p>怎么理解反射？</p></li><li><p>怎么通过反射来创建一个对象？</p></li></ol><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><ol><li>说说你对<code>HashMap</code>数据结构的理解？</li></ol><blockquote><p><code>HashMap</code>数据结构</p></blockquote><p>首先，hashmap 的数据结构是基于数组和链表的，如图：</p><p><img src="https://cs-wlei224.obs.cn-south-1.myhuaweicloud.com/blog-imgs/202312070046177.png" alt="img"></p><p>so，既然是基于数组和链表的，那就说明数组和链表的特点也就是 HashMap 的特点：</p><p><strong>数组：寻址快，直接根据索引访问元素，插入和删除慢；</strong></p><p><strong>链表：寻址慢，需要从头节点开始遍历，插入和删除快。</strong></p><p>说到 HashMap 就要说到 Java 8 了，Java 8 之前，HashMap 使用一个数组加链表的结构来存储 【K，V】 键值对。</p><p>如果发生 hash 冲突，那么</p><p>这将导致在处理 hash 冲突的时候性能不高，尤其是链表很长的时候。因此，Java 8 中的 HashMap 引入了红黑树来替代链表，这样当链表变长的时候，会自动转换为红黑树，从而提高了增删改查的性能。</p><ol start="2"><li>什么是 Hash 冲突？怎么解决？</li></ol><blockquote><p>什么是 Hash 冲突</p></blockquote><blockquote><p>怎么解决？</p></blockquote><ol start="2"><li>为什么阿里巴巴Java开发者手册中有一条建议是<strong>强制禁止</strong>使用构造方法把 BigDecimal(double) 的方式把 double 的值转化为 BigDecimal 对象？</li></ol><blockquote><p>说明：因为会存在精度损失风险，如：BigDecimal(0.1F)，实际存储值为0.10000000149，</p><p>正确的方法应该怎么做？</p><p>一：String入参：BigDecimal bd &#x3D; new BigDecimal(“0.1”)</p><p>二：使用内部的 valueOf 方法：BigDecimal bd1 &#x3D; BigDecimal.valueOf(0.1);</p></blockquote>]]></content:encoded>
      
      
      <category domain="https://wl2o2o.github.io/categories/Java-U8G/">Java U8G</category>
      
      
      <category domain="https://wl2o2o.github.io/tags/%E5%85%AB%E8%82%A1%E6%96%87/">八股文</category>
      
      <category domain="https://wl2o2o.github.io/tags/%E9%9D%A2%E8%AF%95%E9%80%86%E8%A2%AD/">面试逆袭</category>
      
      
      <comments>https://wl2o2o.github.io/posts/50aab414.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>我的 MySQL 随笔</title>
      <link>https://wl2o2o.github.io/posts/129a1d80.html</link>
      <guid>https://wl2o2o.github.io/posts/129a1d80.html</guid>
      <pubDate>Thu, 16 Nov 2023 06:33:14 GMT</pubDate>
      
      <description>MySQL形象八股文随笔，不形象你打我系列</description>
      
      
      
      <content:encoded><![CDATA[<ul><li><input checked="" disabled="" type="checkbox"> 基础篇</li><li><input checked="" disabled="" type="checkbox"> 架构篇</li><li><input checked="" disabled="" type="checkbox"> 存储引擎</li><li><input disabled="" type="checkbox"> 日志管理</li><li><input disabled="" type="checkbox"> SQL调优</li><li><input disabled="" type="checkbox"> 索引</li><li><input disabled="" type="checkbox"> 锁</li><li><input disabled="" type="checkbox"> 事务</li><li><input disabled="" type="checkbox"> 高可用&#x2F;性能</li><li><input disabled="" type="checkbox"> 运维</li></ul><h1 id="MySQL形象八股文，不形象你打我"><a href="#MySQL形象八股文，不形象你打我" class="headerlink" title="MySQL形象八股文，不形象你打我"></a>MySQL形象八股文，不形象你打我</h1><p><em>首先，自我洗脑：MySQL不难！MySQL不难！MySQL不难！！！</em></p><blockquote><p>学习 MySQL 之前，我们先问问自己什么是 MySQL ？他是一个关系型数据库（<strong>R-DBMS：relational database manage system</strong>），顾名思义就是用于存放数据的。</p><p>为什么大家都学 MySQL ，有什么优点？用我的屁股想一想，首先肯定稳定、好用、免费，再加其他的优点，所以就被广泛使用了。</p><p>🆗，那我们就话不多说，下面围绕 MySQL 就是一个存放数据的房子的理念（什么？放数据的房子？那么就是快递驿站吗），浅析 MySQL！</p></blockquote><h2 id="基础篇"><a href="#基础篇" class="headerlink" title="基础篇"></a>基础篇</h2><blockquote><p>Q：什么是数据库第一二三范式？</p></blockquote><p>  A：</p><ul><li>第一范式：又称专一范式，字段不能再拆分；</li><li>第二范式：又称 MySQL 家规，必须完全依赖顺从主键，若有与主键无关字段者，设置为联合主键；</li><li>第三范式：又称恋爱脑范式，遵守家规，远离小三。</li></ul><p><img src="https://cs-wlei224.obs.cn-south-1.myhuaweicloud.com/blog-imgs/202311181056209.jpeg" alt="img"></p><p>一般来说，“<code>小企</code>”这个渣男（也可能不止<code>小企</code>）在日常开发中都是违反<code>范式家规</code>标准的，要为了性能，通过一些冗余的数据，空间换时间。</p><blockquote><p>Q：MySQL 有几种字段类型？</p></blockquote><p>  A：字段类型大致可以分为三类：数值类型、字符类型、时间类型</p><ul><li><p>数值类型：</p><ul><li><p>整数类型：微小TYNYINT、小SMALLINT、中等MEDIUMINT、INT、大整型BIGINT；</p></li><li><p>小数类型：FLOAT、DUBBLE、DECIMAL、NUMERIC</p></li></ul></li><li><p>字符类型：（还有好几种）</p><ul><li><p>CHAR</p></li><li><p>VARCHAR</p></li><li><p>BINARY</p></li><li><p>VARBINARY</p></li><li><p>BLOB</p><ul><li>二进制大对象类型，用于存储二进制数据（如文档、图像、音频等），有两个分支，小TINYBLOB和长LONGBLOB</li></ul></li><li><p>TEXT</p><ul><li>文本类型，不许预设长度，可根据需要动态划分空间。也分为 TINYTEXT 和 LONGTEXT，以适应不同大小的文本数据</li></ul></li><li><p>ENUM</p><ul><li>枚举类型，限制了字段存储的值</li></ul></li><li><p>SET</p><ul><li>集合类型，不可重复</li></ul></li></ul></li><li><p>日期&#x2F;时间类型</p><ul><li>DATE</li><li>TIME</li><li>DATETIME</li><li>TIMESTAMP</li></ul></li></ul><blockquote><p>Q：CHAR 和 VARCHAR 字符类型的区别?</p></blockquote><p>  A：</p><ul><li><code>char</code>长度固定，所以存取速度快，甚至快varchar一半；如果长度没有达到预设值，用空格补充。因为定长，所以浪费一些空间，属于空间换时间。最多可存<code>255</code>个字符；</li><li><code>varchar</code>字符长度可变，所以不浪费空间，属于时间换空间。最多可存放<code>65532</code>个字符串，至于为什么是<code>65532</code>，那就需要看相关存储引擎<code>InnoDB</code>的知识了。</li></ul><blockquote><p>Q：说一说两个<strong>时间类型</strong>的区别</p></blockquote><p>  A：</p><ul><li>时间起始范围不同，<code>TIMESTAMP</code>为<code>1970-2028</code>，<code>datetime</code>为<code>1000-9999</code></li><li>存储空间不同，<code>TIMESTAMP</code>存储空间为<code>4字节</code>，<code>DATETIME</code>存储空间为<code>8字节</code></li><li>时区，<code>TIMESTAMP</code>存储时间依赖于时区显示，<code>DATETIME</code>存储时间与时区无关</li><li>默认值，<code>TIMESTAMP</code>不为空，后者为空</li></ul><blockquote><p>Q：什么类型可以用于存储二进制数据？</p></blockquote><p>A：blob，Blob常常是数据库中用来存储二进制文件的字段类型。通常用于存储大量的数据，例如音频、视频、图片等文件，由于它们的大小，必须使用特殊的方式来处理（例如：上传、下载或者存放到一个数据库）。</p><blockquote><p>Q：怎么存储<code>emoji</code>表情？</p></blockquote><p>A：</p><blockquote><p>Q：你了解 SQL 的执行流程吗？</p></blockquote><p>A：为了更加直观，借用<code>三元表达式</code>的语法来描述一条 SQL 执行的流程。</p><ol><li>首先检查 SQL 是否有执行的权限？ 查询结果缓存 ：返回报错信息；</li><li>是否有缓存？ 直接返回结果 ：检查 SQL 是否有语法错误；</li><li>语法正确？ MySQL 的服务器对语句进行优化，确定执行方案 ：</li><li>确定方案？调用数据库引擎接口，执行方案，返回执行结果。</li></ol><blockquote><p>Q：什么是 DDL 与 DML ?</p></blockquote><p>A：是 DBMS 中的不同类型的语言指令集。</p><ul><li>DDL：database definition language，定义或修改数据库结构的命令，例如：CREAT、ALTER、DROP、TRUNCATE(截断，命令用于快速删除表中的所有数据但不删除表本身。)</li><li>DML：database manipulation language，用于操作数据库中的数据的命令，例如CURD</li></ul><h2 id="架构篇"><a href="#架构篇" class="headerlink" title="架构篇"></a>架构篇</h2><p>首先，收起你自认为架构篇很难理解的想法，我们还是从 MySQL 是一个房子入手。</p><blockquote><p>Q：你是怎么理解 MySQL 的架构的？</p></blockquote><p>A：MySQL 就相当于一个档案室，存放不同的档案，一个数据库好用，肯定有原因，架构也就是构成。那么一个快递驿站肯定包括下面这三部分：</p><ul><li>快递驿站APP–客户端（与用户交互的关键）</li><li>工作人员–存储引擎（我 MySQL 学的不好，我猜应该是与存储规则相关的）</li><li>快递货架–服务层（堆放数据，索引数据）</li></ul><p><code>&#123;&#123;&#123;&#123;&#123;&#123;待画图！！！&#125;&#125;&#125;&#125;&#125;&#125;</code></p><p>MySQL 逻辑架构图主要分为三层：客户端、存储引擎、服务层</p><ol><li>客户端层：这是与 MySQL 服务器交互的接口，它提供了用户与服务器进行通信的手段。客户端层处理连接请求、处理查询请求、认证用户权限以及执行与服务器之间的通信。此外，这一层还负责处理与服务相关的各种任务，例如管理连接、处理错误、诊断和调试等。</li><li>Server 层：这一层是 MySQL 的核心，它包含了大多数 MySQL 的服务功能。这包括解析查询语句、分析查询计划、优化查询计划以及执行查询计划等。此外，Server 层还负责处理内置函数，如日期、时间、数学和加密函数等。对于跨存储引擎的功能，如存储过程、触发器和视图等，也都在这一层实现。这些功能对于整个数据库系统来说是至关重要的。</li><li>存储引擎层：这一层负责数据的存储和提取。存储引擎负责与底层操作系统交互，管理数据的存储位置、文件格式和索引等。不同的存储引擎具有不同的特点和性能，可以根据应用的需求选择适合的存储引擎。MySQL 支持多种存储引擎，如 InnoDB、MyISAM、Memory 等。存储引擎通过 API 与 Server 层进行通信，这些接口屏蔽了不同存储引擎之间的差异，使得上层的应用程序可以透明地访问底层的数据存储方式。</li></ol><p><img src="https://cs-wlei224.obs.cn-south-1.myhuaweicloud.com/blog-imgs/202311201957518.png" alt="img"></p><blockquote><p>Q：数据库调优，你是怎么做的</p></blockquote><p>A：以下回答来自文心一言，待优化，回答要结合MySQL的<strong>架构以及存储引擎</strong>来说，以及自己的见解</p><p>数据库调优的方法有很多，以下是一些常见的调优方法：</p><ol><li>定期优化重建数据库：定期对数据库进行优化和重建，可以消除数据库中的碎片和冗余数据，提高数据库的性能和稳定性。</li><li>减少磁盘写入操作：通过使用缓存技术、优化数据插入和更新操作、避免频繁的磁盘操作等手段，可以减少磁盘的写入操作，提高数据库的性能。</li><li>合理使用索引：索引是提高查询速度的重要手段，通过添加合适的索引可以加速查询操作。需要根据查询语句和表结构来确定需要添加的索引。</li><li>优化SQL语句：通过优化SQL语句，可以减少数据库的负载和提高查询效率。例如，避免使用SELECT * 语句，只查询需要的数据字段；避免在查询中使用复杂的子查询和连接查询等。</li><li>调整数据库参数：根据实际需求和性能测试结果，调整数据库的参数可以提高数据库的性能和响应速度。</li><li>使用存储过程和触发器：存储过程和触发器可以减少数据库的负载和提高数据处理效率。通过将常用的数据处理逻辑封装到存储过程和触发器中，可以减少对数据库的频繁操作。</li><li>数据库分区：对于大型数据库，可以采用分区技术将数据分散到不同的磁盘上，提高I&#x2F;O处理能力和并发性能。</li><li>使用RAID技术：RAID技术可以提供高性能、高可靠性和高容错的存储系统，通过将数据分散到多个磁盘上，可以提高I&#x2F;O处理能力和数据安全性。</li><li>使用缓存技术：缓存技术可以减少磁盘访问次数和提高数据处理速度。例如，使用内存缓存来存储经常访问的数据，减少对磁盘的访问次数。</li><li>定期备份数据：定期备份数据可以防止数据丢失和灾难性故障，同时也可以提高数据处理效率和安全性。</li></ol><p>这些方法可以根据实际情况选择使用，但需要注意的是，数据库调优是一个复杂的过程，需要综合考虑系统硬件、应用程序和数据等方面的因素。因此，在进行数据库调优时，建议根据实际情况进行测试和评估，以确保达到最佳的效果。</p><blockquote><p>Q：你知道三种存储引擎的区别吗？</p></blockquote><p>A：</p><table><thead><tr><th>功能</th><th>MlSAM</th><th>MEMORY</th><th>InnoDB</th></tr></thead><tbody><tr><td>存储限制</td><td>256TB</td><td>RAM</td><td>64TB</td></tr><tr><td>支持事务</td><td>No</td><td>No</td><td>Yes</td></tr><tr><td>支持全文索引</td><td>Yes</td><td>No</td><td>Yes</td></tr><tr><td>支持树索引</td><td>Yes</td><td>Yes</td><td>Yes</td></tr><tr><td>支持哈希索引</td><td>No</td><td>Yes</td><td>Yes</td></tr><tr><td>支持数据缓存</td><td>No</td><td>N&#x2F;A</td><td>Yes</td></tr><tr><td>支持外键</td><td>No</td><td>No</td><td>Yes</td></tr></tbody></table><p>怎么选择存储引擎的使用？</p><ol><li>想用事务安全，并要求实现并发控制，用InnoDB</li><li>主要用来查询与插入记录，用MyISAM</li><li>临时存放数据，不考虑安全，用MEMORY</li></ol><p><strong>tips：存储引擎是基于数据表</strong>的，所以一个数据库的多个表<strong>可以根据实际业务</strong>，来<strong>使用不同的存储引擎</strong>，以此<strong>提高</strong>整个数据库的<strong>性能</strong>。</p><table><thead><tr><th>区别</th><th>MyISAM</th><th>InnoDB</th></tr></thead><tbody><tr><td>存储结构</td><td>每个表存储成3个文件：表定义文件（.frm）数据文件（.MYD）索引文件（.MYI）</td><td>所有表存放于同一数据文件，也可能多个文件或者独立的表空间文件，表的大小一般为2G</td></tr><tr><td>事务</td><td>不支持</td><td>支持</td></tr><tr><td>最小锁粒度</td><td>表级锁，更新会锁表，导致其他查询与插入阻塞</td><td>行级锁</td></tr><tr><td>索引类型</td><td>非聚簇索引，B树</td><td>聚簇索引，B+树</td></tr><tr><td>主键</td><td>可无</td><td>如未设置，自动生成（用户不可见）</td></tr><tr><td>外键</td><td>不支持</td><td>支持</td></tr><tr><td>表行数</td><td>存有缓存，直接取出</td><td>需要遍历整个表</td></tr></tbody></table><p><em>🆗架构篇就到这里，有没发现，似乎MySQL的基础架构也就这回事，也没啥难点。最后强调一点，当我们试图学会一门知识的时候，不要机械记忆，重要的是融会贯通（内心OS：啥子贯通？不就是理论翻译成人话吗？），找到适合自己记忆的方法。</em></p>]]></content:encoded>
      
      
      <category domain="https://wl2o2o.github.io/categories/Java-U8G/">Java U8G</category>
      
      
      <category domain="https://wl2o2o.github.io/tags/%E5%85%AB%E8%82%A1%E6%96%87/">八股文</category>
      
      <category domain="https://wl2o2o.github.io/tags/%E9%9D%A2%E8%AF%95%E9%80%86%E8%A2%AD/">面试逆袭</category>
      
      
      <comments>https://wl2o2o.github.io/posts/129a1d80.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>LCR-003-比特位计数</title>
      <link>https://wl2o2o.github.io/posts/88baec38.html</link>
      <guid>https://wl2o2o.github.io/posts/88baec38.html</guid>
      <pubDate>Tue, 24 Oct 2023 03:06:02 GMT</pubDate>
      
      <description>被chatGPT吊打的一天</description>
      
      
      
      <content:encoded><![CDATA[<p><a href="https://leetcode.cn/problems/w3tCBm/">LCR 003. 比特位计数</a></p><p>给定一个非负整数 <code>n</code> ，请计算 <code>0</code> 到 <code>n</code> 之间的每个数字的二进制表示中 1 的个数，并输出一个数组。</p><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入: n = 2</span><br><span class="line">输出: [0,1,1]</span><br><span class="line">解释: </span><br><span class="line">0 --&gt; 0</span><br><span class="line">1 --&gt; 1</span><br><span class="line">2 --&gt; 10</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">输入: n = 5</span><br><span class="line">输出: [0,1,1,2,1,2]</span><br><span class="line">解释:</span><br><span class="line">0 --&gt; 0</span><br><span class="line">1 --&gt; 1</span><br><span class="line">2 --&gt; 10</span><br><span class="line">3 --&gt; 11</span><br><span class="line">4 --&gt; 100</span><br><span class="line">5 --&gt; 101</span><br></pre></td></tr></table></figure><p><strong>说明 :</strong></p><ul><li><code>0 &lt;= n &lt;= 105</code></li></ul><p><strong>进阶:</strong></p><ul><li>给出时间复杂度为 <code>O(n*sizeof(integer))</code> 的解答非常容易。但你可以在线性时间 <code>O(n)</code> 内用一趟扫描做到吗？</li><li>要求算法的空间复杂度为 <code>O(n)</code> 。</li><li>你能进一步完善解法吗？要求在C++或任何其他语言中不使用任何内置函数（如 C++ 中的 <code>__builtin_popcount</code> ）来执行此操作。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// import java.util.ArrayList;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// class Solution &#123;</span></span><br><span class="line"><span class="comment">//     public int[] countBits(int n) &#123;</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">//         ArrayList&lt;Integer&gt; list = new ArrayList&lt;&gt;();</span></span><br><span class="line"><span class="comment">//         // 将0-n每一个数字首先转换为二进制数，存放于list中</span></span><br><span class="line"><span class="comment">//         for (int i = 0; i &lt;= n; i++) &#123;</span></span><br><span class="line"><span class="comment">//             String str = Integer.toBinaryString(i);</span></span><br><span class="line"><span class="comment">//             int ans = Integer.parseInt(str, 2);</span></span><br><span class="line"><span class="comment">//             list.add(ans);</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//         return count(list);</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//     // 计数函数</span></span><br><span class="line"><span class="comment">//     public int[] count(ArrayList&lt;Integer&gt; list) &#123;</span></span><br><span class="line"><span class="comment">//         int[] res = new int[list.size()];</span></span><br><span class="line"><span class="comment">//         res[0] = 0;</span></span><br><span class="line"><span class="comment">//         res[1] = 1;</span></span><br><span class="line"><span class="comment">//         int count = 0;</span></span><br><span class="line"><span class="comment">//         int size = res.length;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//         for (int i = 0; i &lt; size; i++) &#123;</span></span><br><span class="line"><span class="comment">//             int a = list.get(i);</span></span><br><span class="line"><span class="comment">//             int b = list.get(i);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//             if ((a &amp; (b - 1)) == 0)</span></span><br><span class="line"><span class="comment">//                 res[i] = 1;</span></span><br><span class="line"><span class="comment">//             else &#123;</span></span><br><span class="line"><span class="comment">//                 char[] ch = String.valueOf(a).toCharArray();</span></span><br><span class="line"><span class="comment">//                 for (int j = 0; j &lt; ch.length; j++) &#123;</span></span><br><span class="line"><span class="comment">//                     if (ch[j] == &#x27;1&#x27;) &#123;</span></span><br><span class="line"><span class="comment">//                         count++;</span></span><br><span class="line"><span class="comment">//                     &#125;</span></span><br><span class="line"><span class="comment">//                 &#125;</span></span><br><span class="line"><span class="comment">//                 res[i] = count;</span></span><br><span class="line"><span class="comment">//             &#125;</span></span><br><span class="line"><span class="comment">//             count = 0;</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//         return res;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] countBits(<span class="type">int</span> n) &#123;</span><br><span class="line">        <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        res[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="comment">// 使用 i &amp; (i - 1) 来计算 i 的二进制表示中包含的 1 的个数</span></span><br><span class="line">            res[i] = res[i &amp; (i - <span class="number">1</span>)] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://wl2o2o.github.io/categories/Algo/">Algo</category>
      
      
      <category domain="https://wl2o2o.github.io/tags/%E2%80%9C-%E2%80%9D%E8%BF%90%E7%AE%97/">“&amp;”运算</category>
      
      <category domain="https://wl2o2o.github.io/tags/%E4%BD%8D%E8%BF%90%E7%AE%97/">位运算</category>
      
      
      <comments>https://wl2o2o.github.io/posts/88baec38.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>LCR-136-删除链表结点</title>
      <link>https://wl2o2o.github.io/posts/67387b59.html</link>
      <guid>https://wl2o2o.github.io/posts/67387b59.html</guid>
      <pubDate>Mon, 16 Oct 2023 08:36:11 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;删除链表结点的两种解法&quot;&gt;&lt;a href=&quot;#删除链表结点的两种解法&quot; class=&quot;headerlink&quot; title=&quot;删除链表结点的两种解法&quot;&gt;&lt;/a&gt;删除链表结点的两种解法&lt;/h1&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="删除链表结点的两种解法"><a href="#删除链表结点的两种解法" class="headerlink" title="删除链表结点的两种解法"></a>删除链表结点的两种解法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">deleteNode</span><span class="params">(ListNode head, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(head.val == val) <span class="keyword">return</span> head.next;</span><br><span class="line">        <span class="keyword">else</span> head.next = deleteNode(head.next,val);</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">deleteNode</span><span class="params">(ListNode head, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head.next;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (head.val == val)  <span class="keyword">return</span> head.next;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cur.val == val) &#123;</span><br><span class="line">                pre.next = cur.next;</span><br><span class="line">            &#125;</span><br><span class="line">            pre = cur;</span><br><span class="line">            cur = cur.next;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://wl2o2o.github.io/categories/Algo/">Algo</category>
      
      
      <category domain="https://wl2o2o.github.io/tags/%E9%93%BE%E8%A1%A8/">链表</category>
      
      <category domain="https://wl2o2o.github.io/tags/%E9%80%92%E5%BD%92/">递归</category>
      
      
      <comments>https://wl2o2o.github.io/posts/67387b59.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>面试官的突袭问题：解密多态，让你从懵逼到彻底掌握！</title>
      <link>https://wl2o2o.github.io/posts/6d0283c9.html</link>
      <guid>https://wl2o2o.github.io/posts/6d0283c9.html</guid>
      <pubDate>Mon, 16 Oct 2023 00:57:50 GMT</pubDate>
      
      <description>面试官的突袭问题：解密多态，让你从懵逼到彻底掌握！</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="Java多态揭秘：从疑惑到真正掌握！面试官的突袭问题让你茫然？解开多态的魔法！"><a href="#Java多态揭秘：从疑惑到真正掌握！面试官的突袭问题让你茫然？解开多态的魔法！" class="headerlink" title="Java多态揭秘：从疑惑到真正掌握！面试官的突袭问题让你茫然？解开多态的魔法！"></a>Java多态揭秘：从疑惑到真正掌握！面试官的突袭问题让你茫然？解开多态的魔法！</h1><blockquote><p>无论是在课堂上、面试中还是与朋友交谈时，当被问到是否理解多态时，我们可能都感到无从下手。这时候，让我通过一个生动的例子，为你彻底解析多态的奥秘！在这个秋招季，面试官的提问可能让你措手不及。但别担心，让我们一起揭开这个问题，带你从茫然到彻底掌握！</p></blockquote><p>本文已发表在<code>CSDN</code>,<a href="http://t.csdnimg.cn/x02pb">阅读链接</a></p><h2 id="继承与重写"><a href="#继承与重写" class="headerlink" title="继承与重写"></a>继承与重写</h2><p>假设我们有一个Animal类，它有一个makeSound()方法，用于输出动物发出的声音。现在，我们再创建一个Dog类，继承自Animal类，并重写makeSound()方法，让它输出狗狗特有的吠声。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">makeSound</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Animal makes sound&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">makeSound</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Dog barks&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="向上转型"><a href="#向上转型" class="headerlink" title="向上转型"></a>向上转型</h2><p>现在，让我们来看看这段代码中隐藏的多态之美！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Animal</span> <span class="variable">animal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">animal.makeSound();  <span class="comment">// 输出: &quot;Dog barks&quot;</span></span><br></pre></td></tr></table></figure><p>在这段代码中，我们创建了一个Animal类型的引用变量animal，并将其指向一个Dog对象。这就是向上转型，让我们能够使用父类类型的引用来引用子类对象。</p><p>当我们调用animal的makeSound()方法时，输出的却是”Dog barks”，而不是我们在Animal类中定义的”Animal makes sound”。这就是多态的奇妙之处！</p><p>在编译时，编译器只知道animal的类型是Animal，因此它只能访问Animal类中定义的方法和属性。但在运行时，实际执行的却是Dog类中重写的makeSound()方法。这是因为Java的运行时系统会根据实际对象的类型来动态决定调用哪个类的方法。</p><p>通过这种方式，我们可以根据实际对象的类型，在运行时决定调用哪个类的方法，实现了多态性。这种灵活性和可扩展性使我们能够编写更通用、灵活的代码，同时提高代码的可维护性和可复用性。</p><p>掌握<strong>继承、重写和向上转型</strong>这三个必要条件，你就能够在面试中从容应对关于多态性的问题。多态性是面向对象编程中不可或缺的核心概念，它为我们打开了编程世界的大门。</p><p>所以，别再为面试官的突袭问题而困惑了！现在，你已经揭开了多态的魔法，让多态性成为你的利器，展现你对Java编程的真正掌握！</p><p>附图：</p><p><img src="https://cs-wlei224.obs.cn-south-1.myhuaweicloud.com/blog-imgs/202310160943256.png" alt="由一张图片引发的深思"></p><h1 id="精简版"><a href="#精简版" class="headerlink" title="精简版"></a>精简版</h1><blockquote><p>什么是多态？</p></blockquote><p>多态就是，对于同一个父类，指向不同子类对象的同一个行为，运行出来结果不同。</p><blockquote><p>怎么理解多态？</p></blockquote><p>例如伪代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animals</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span> &#123;</span><br><span class="line">        sout(<span class="string">&quot;坐着睡！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animals</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span> &#123;</span><br><span class="line">        sout(<span class="string">&quot;站立着睡！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animals</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span> &#123;</span><br><span class="line">        sout(<span class="string">&quot;睁眼睡！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 同一个父类 Animals，指向不同子类 Dog、Cat</span></span><br><span class="line"><span class="type">Animals</span> <span class="variable">animals1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line"><span class="type">Animals</span> <span class="variable">animals2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br></pre></td></tr></table></figure><p>对于<code>animals1.sleep()</code>和<code>animals2.sleep()</code>，最后运行出来可能会有不用的结果，但是这取决于几个条件：</p><ul><li><p>继承类或实现接口</p></li><li><p>子类重写方法</p></li><li><p>同一个父类，指向不同子类</p></li></ul><blockquote><p>重载与重写什么区别？</p></blockquote><p>引用 Wiki 百科：</p><blockquote><h2 id="函数重载规则"><a href="#函数重载规则" class="headerlink" title="函数重载规则"></a>函数重载规则</h2><ul><li>多个函数定义使用相同的函数名称</li><li>函数参数的数量或类型必须有区别</li></ul><p>函数重载是静态多态的一种类别，其使用某种“最佳匹配”算法解析函数调用，通过找到形式参数类型与实际参数类型的最佳匹配来解析要调用的具体函数。该算法的细节因语言而异。</p><p>函数重载通常与<a href="https://zh.wikipedia.org/wiki/%E9%A1%9E%E5%9E%8B%E7%B3%BB%E7%B5%B1">静态类型</a>编程语言（在<a href="https://zh.wikipedia.org/wiki/%E5%AD%90%E7%A8%8B%E5%BA%8F">函数调用</a>中强制执行<a href="https://zh.wikipedia.org/wiki/%E9%A1%9E%E5%9E%8B%E7%B3%BB%E7%B5%B1#%E5%9E%8B%E5%88%A5%E6%AA%A2%E6%9F%A5">类型检查</a>）有关。重载函数实际上只是一组具有相同名称的不同函数。具体调用使用哪个函数是在<a href="https://zh.wikipedia.org/wiki/%E7%BC%96%E8%AF%91%E6%9C%9F"><strong>编译期</strong></a>决定的。</p><p>在 <a href="https://zh.wikipedia.org/wiki/Java">Java</a> 中，函数重载也被称为编译时多态和静态多态。</p><p>函数重载不应与在运行时进行选择的<a href="https://zh.wikipedia.org/wiki/%E5%A4%9A%E6%80%81_(%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6)">多态</a>形式混淆，例如通过<a href="https://zh.wikipedia.org/wiki/%E8%99%9A%E5%87%BD%E6%95%B0">虚函数</a>而不是静态函数。</p></blockquote><p>因此我们大概明白：</p><ul><li>重载是编译时重载的，编译时根据参数，决定调用哪个方法</li><li>重写是运行期重写的，运行时根据父类指向的子类，调用方法</li></ul><p><strong>总结：</strong></p><p>重载和重写都是多态的体现，维基百科中也有说明<a href="https://zh.wikipedia.org/wiki/%E5%A4%9A%E6%80%81_(%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6)">多态分为动态多态和静态多态</a></p><p>如图：</p><p><img src="https://cs-wlei224.obs.cn-south-1.myhuaweicloud.com/blog-imgs/202312141036730.png" alt="image-20231214103612773"></p><p>那么我们不妨理解为重载为静态动态（编译器决定）、重写为运行期决定的，为动态多态。</p>]]></content:encoded>
      
      
      <category domain="https://wl2o2o.github.io/categories/Blog/">Blog</category>
      
      
      <category domain="https://wl2o2o.github.io/tags/Polymorphism/">Polymorphism</category>
      
      
      <comments>https://wl2o2o.github.io/posts/6d0283c9.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>abstract class &amp;&amp; interface</title>
      <link>https://wl2o2o.github.io/posts/d784ab99.html</link>
      <guid>https://wl2o2o.github.io/posts/d784ab99.html</guid>
      <pubDate>Sat, 07 Oct 2023 00:58:32 GMT</pubDate>
      
      <description>你知道抽象类(abstract class)和接口(interface)有什么区别吗？</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="抽象类-abstract-class-和接口-interface-有什么区别？"><a href="#抽象类-abstract-class-和接口-interface-有什么区别？" class="headerlink" title="抽象类(abstract class)和接口(interface)有什么区别？"></a>抽象类(abstract class)和接口(interface)有什么区别？</h2><h3 id="代码示例："><a href="#代码示例：" class="headerlink" title="代码示例："></a>代码示例：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抽象类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="comment">// 非抽象方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Animal is eating.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 抽象方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">makeSound</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现抽象类的子类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="comment">// 实现抽象方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">makeSound</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Dog is barking.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="comment">// 接口中的常量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">double</span> <span class="variable">PI</span> <span class="operator">=</span> <span class="number">3.14</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 抽象方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getArea</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 抽象方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getPerimeter</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现接口的类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">implements</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> radius;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Circle</span><span class="params">(<span class="type">double</span> radius)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.radius = radius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实现接口的抽象方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getArea</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> PI * radius * radius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实现接口的抽象方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getPerimeter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * PI * radius;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="区别："><a href="#区别：" class="headerlink" title="区别："></a>区别：</h3><p>抽象类：</p><ul><li>可以包含非抽象方法和抽象方法；</li><li>可以包含属性和构造方法；</li><li>可以被继承，且一个类只能继承一个抽象类；</li><li>抽象方法必须被子类实现；</li><li>可以有访问修饰符和static、final等修饰符。</li></ul><p>接口：</p><ul><li>只能包含抽象方法和常量；</li><li>可以被类实现，一个类可以实现多个接口；</li><li>接口中的方法默认为public，且不能有方法体；</li><li>接口中的属性默认为public static final，且不能被修改；</li><li>JDK8之后，接口中可以有默认方法和静态方法。</li><li>JDK9 在接⼝中引⼊了私有⽅法和私有静态⽅法。</li></ul><p>从设计层面来说：</p><ul><li>抽象类是对类的抽象，是一种模板设计；</li><li>接口是对行为的抽象，是一种行为的规范。</li></ul>]]></content:encoded>
      
      
      <category domain="https://wl2o2o.github.io/categories/Java-notes/">Java notes</category>
      
      
      <category domain="https://wl2o2o.github.io/tags/Java%E5%9F%BA%E7%A1%80/">Java基础</category>
      
      
      <comments>https://wl2o2o.github.io/posts/d784ab99.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>hiOffer</title>
      <link>https://wl2o2o.github.io/posts/24fbdc49.html</link>
      <guid>https://wl2o2o.github.io/posts/24fbdc49.html</guid>
      <pubDate>Sat, 23 Sep 2023 13:06:01 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;BOSS您好，我对您发布的 XX 岗位很感兴趣。&lt;br&gt;本人句由 XXX 的工作经验，上一段工作经历是在 XXX 公司担任 XXX&lt;/p&gt;
&lt;p&gt;（应届生写实习经验）&lt;br&gt;主要负责 XXX ，XXX ，以及 XXX&lt;/p&gt;
&lt;p&gt;（主要写自己的工作内容，最好是浓缩为三点!</description>
        
      
      
      
      <content:encoded><![CDATA[<p>BOSS您好，我对您发布的 XX 岗位很感兴趣。<br>本人句由 XXX 的工作经验，上一段工作经历是在 XXX 公司担任 XXX</p><p>（应届生写实习经验）<br>主要负责 XXX ，XXX ，以及 XXX</p><p>（主要写自己的工作内容，最好是浓缩为三点!<br>  ✨✨✨这是最精髓的地方，设法吸引面试官继续看下去。）<br>擅长 XXX，从〇到一 XXX ，落地 XXX，沉淀相关文档 XXX篇。</p><p>（写自己的优势（人无我有，人有我精），<br>   这个地方要根据 岗位的 JD 动态调整。最好是可以量化展示）</p><p>熟练掌握 XXX, XXX, XXX</p><p>（只写掌握，了解默认是不会<br>   注意排序要按照岗位 JD 的顺序进行排列，然后加上通用技能）<br>详细情况您可以看下我的简历，期待您的回复！</p><p><img src="https://cs-wlei224.obs.cn-south-1.myhuaweicloud.com/blog-imgs/202310081632483.png" alt="大佬给的招呼模板"></p>]]></content:encoded>
      
      
      
      <category domain="https://wl2o2o.github.io/tags/None/">None</category>
      
      
      <comments>https://wl2o2o.github.io/posts/24fbdc49.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>一篇文章搞懂 log4j 的使用方法</title>
      <link>https://wl2o2o.github.io/posts/a5a0061d.html</link>
      <guid>https://wl2o2o.github.io/posts/a5a0061d.html</guid>
      <pubDate>Thu, 21 Sep 2023 16:33:33 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;一篇文章搞懂-MyBatis-配置-log4j-的使用方法&quot;&gt;&lt;a href=&quot;#一篇文章搞懂-MyBatis-配置-log4j-的使用方法&quot; class=&quot;headerlink&quot; title=&quot;一篇文章搞懂 MyBatis 配置 log4j 的使用方法&quot;&gt;&lt;/a</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="一篇文章搞懂-MyBatis-配置-log4j-的使用方法"><a href="#一篇文章搞懂-MyBatis-配置-log4j-的使用方法" class="headerlink" title="一篇文章搞懂 MyBatis 配置 log4j 的使用方法"></a>一篇文章搞懂 MyBatis 配置 log4j 的使用方法</h1><blockquote><p><a href="https://logging.apache.org/log4j/2.x/index.html">Log4j</a>是 Apache 的一个开源项目，通过使用Log4j，我们可以控制日志信息输送的目的地是控制台、文件、GUI组件，甚至是套接口服务器、NT的事件记录器、UNIX Syslog 守护进程等；我们也可以控制每一条日志的输出格式；通过定义每一条日志信息的级别，我们能够更加细致地控制日志的生成过程。最令人感兴趣的就是，这些可以通过一个配置文件来灵活地进行配置，而不需要修改应用的代码。</p><p>​——————摘自百度百科</p></blockquote><h2 id="一、引入依赖"><a href="#一、引入依赖" class="headerlink" title="一、引入依赖"></a>一、引入依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="二、在mybatis-config-xml文件加入-setting-标签"><a href="#二、在mybatis-config-xml文件加入-setting-标签" class="headerlink" title="二、在mybatis-config.xml文件加入 setting 标签"></a>二、在<code>mybatis-config.xml</code>文件加入 setting 标签</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--设置使用的日志类型--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;LOG4J&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="mybatis-config-xml文件模板"><a href="#mybatis-config-xml文件模板" class="headerlink" title="mybatis-config.xml文件模板:"></a><code>mybatis-config.xml</code>文件模板:</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--MyBatis配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--添加properties配置文件路径(外部配置、动态替换)--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;database.properties&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--设置使用的日志类型--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;LOG4J&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--JDBC环境配置、选中默认环境--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;MySqlDB&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--MySql数据库环境配置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;MySqlDB&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--事务管理--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--连接池--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--Mapper注册--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--注册Mapper文件的所在位置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mapper/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="database-properties配置文件模板："><a href="#database-properties配置文件模板：" class="headerlink" title="database.properties配置文件模板："></a><code>database.properties</code>配置文件模板：</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#key=value</span></span><br><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/test?characterEncoding=utf8&amp;useSSL=false&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure><h2 id="三、在-resources-目录下创建log4j-properties并写入："><a href="#三、在-resources-目录下创建log4j-properties并写入：" class="headerlink" title="三、在 resources 目录下创建log4j.properties并写入："></a>三、在 resources 目录下创建log4j.properties并写入：</h2><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将等级为DEBUG的日志信息输出到console和file这两个目的地，console和file的定义在下面的代码</span></span><br><span class="line"><span class="attr">log4j.rootLogger</span>=<span class="string">DEBUG,console,file</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">#控制台输出的相关设置</span></span><br><span class="line"><span class="attr">log4j.appender.console</span> = <span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="attr">log4j.appender.console.Target</span> = <span class="string">System.out</span></span><br><span class="line"><span class="attr">log4j.appender.console.Threshold</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="comment">#布局</span></span><br><span class="line"><span class="attr">log4j.appender.console.layout</span> = <span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="comment">#日志格式</span></span><br><span class="line"><span class="attr">log4j.appender.console.layout.ConversionPattern</span>=<span class="string">[%c]-%m%n</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">#文件输出的相关设置</span></span><br><span class="line"><span class="attr">log4j.appender.file</span> = <span class="string">org.apache.log4j.RollingFileAppender</span></span><br><span class="line"><span class="comment">#生成文件的名字</span></span><br><span class="line"><span class="attr">log4j.appender.file.File</span>=<span class="string">./log/shao.log</span></span><br><span class="line"><span class="comment">#文件最大大小</span></span><br><span class="line"><span class="attr">log4j.appender.file.MaxFileSize</span>=<span class="string">10mb</span></span><br><span class="line"><span class="attr">log4j.appender.file.Threshold</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="attr">log4j.appender.file.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="attr">log4j.appender.file.layout.ConversionPattern</span>=<span class="string">[%p][%d&#123;yy-MM-dd&#125;][%c]%m%n</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">#日志输出级别</span></span><br><span class="line"><span class="attr">log4j.logger.org.mybatis</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="attr">log4j.logger.java.sql</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="attr">log4j.logger.java.sql.Statement</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="attr">log4j.logger.java.sql.ResultSet</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="attr">log4j.logger.java.sql.PreparedStatement</span>=<span class="string">DEBUG</span></span><br></pre></td></tr></table></figure><h2 id="四、运行测试"><a href="#四、运行测试" class="headerlink" title="四、运行测试"></a>四、运行测试</h2><p><img src="https://cs-wlei224.obs.cn-south-1.myhuaweicloud.com/blog-imgs/202309220052332.png" alt="测试成功"></p><p>over！</p>]]></content:encoded>
      
      
      <category domain="https://wl2o2o.github.io/categories/Frameworks/">Frameworks</category>
      
      
      <category domain="https://wl2o2o.github.io/tags/MyBatis/">MyBatis</category>
      
      <category domain="https://wl2o2o.github.io/tags/Logging-Services/">Logging Services</category>
      
      
      <comments>https://wl2o2o.github.io/posts/a5a0061d.html#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
